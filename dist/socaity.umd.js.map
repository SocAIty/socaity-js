{"version":3,"file":"socaity.umd.js","sources":["../sdk/core/web/RequestHandler.ts","../sdk/types.ts","../sdk/core/web/ResponseParser.ts","../sdk/core/MediaHandler.ts","../sdk/core/JobManager.ts","../sdk/configuration.ts","../sdk/index.ts"],"sourcesContent":["import { Configuration } from '../../configuration';\r\nimport { ApiResponse, RequestOptions } from '../../types';\r\n\r\n/**\r\n * Handles HTTP requests to the Socaity API\r\n */\r\nexport class RequestHandler {\r\n  private config: Configuration;\r\n  private controller: AbortController;\r\n\r\n  constructor(config: Configuration) {\r\n    this.config = config;\r\n    this.controller = new AbortController();\r\n  }\r\n\r\n  /**\r\n   * Send a request to the API\r\n   * @param endpoint - API endpoint path\r\n   * @param method - HTTP method (GET, POST, etc)\r\n   * @param params - Request parameters\r\n   * @param apiKey - API key to use for this request\r\n   * @param file - Optional file to upload\r\n   * @returns Promise with the API response\r\n   */\r\n  async sendRequest(\r\n    endpoint: string,\r\n    method: 'GET' | 'POST' = 'POST',\r\n    params: Record<string, any> = {},\r\n    apiKey?: string,\r\n    file?: File | Blob | string\r\n  ): Promise<ApiResponse> {\r\n    const url = `${this.config.baseUrl}/${endpoint}`;\r\n    const key = apiKey || this.config.apiKey;\r\n    \r\n    if (!key) {\r\n      throw new Error('API key not provided');\r\n    }\r\n\r\n    const options: RequestOptions = {\r\n      method,\r\n      headers: {\r\n        'Authorization': `Bearer ${key}`,\r\n      },\r\n      signal: this.controller.signal\r\n    };\r\n\r\n    // Handle file uploads\r\n    if (file) {\r\n      const formData = new FormData();\r\n      \r\n      // Add parameters to form data\r\n      Object.entries(params).forEach(([key, value]: [string, unknown]) => {\r\n        if (typeof value === 'object') {\r\n          formData.append(key, JSON.stringify(value));\r\n        } else {\r\n          formData.append(key, String(value));\r\n        }\r\n      });\r\n      \r\n      // Add file to form data\r\n      if (typeof file === 'string') {\r\n        // Handle URL or base64 string\r\n        formData.append('file', file);\r\n      } else {\r\n        // Browser File or Blob object\r\n        formData.append('file', file);\r\n      }\r\n      \r\n      options.body = formData;\r\n    } else if (Object.keys(params).length > 0) {\r\n      if (method === 'GET') {\r\n        // Convert params to query string for GET requests\r\n        const queryParams = new URLSearchParams();\r\n        \r\n        Object.entries(params).forEach(([key, value]: [string, unknown]) => {\r\n          if (typeof value === 'object') {\r\n            queryParams.append(key, JSON.stringify(value));\r\n          } else {\r\n            queryParams.append(key, String(value));\r\n          }\r\n        });\r\n        \r\n        const queryString = queryParams.toString();\r\n        if (queryString) {\r\n          endpoint = `${endpoint}?${queryString}`;\r\n        }\r\n      } else {\r\n        // JSON body for non-file POST requests\r\n        options.headers['Content-Type'] = 'application/json';\r\n        options.body = JSON.stringify(params);\r\n      }\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(url, options);\r\n      \r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        throw new Error(`API error (${response.status}): ${errorText}`);\r\n      }\r\n      \r\n      return await response.json();\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        throw error;\r\n      }\r\n      throw new Error(`Network error: ${String(error)}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send a GET request\r\n   */\r\n  async get(endpoint: string, params: Record<string, any> = {}, apiKey?: string): Promise<ApiResponse> {\r\n    return this.sendRequest(endpoint, 'GET', params, apiKey);\r\n  }\r\n\r\n  /**\r\n   * Send a POST request\r\n   */\r\n  async post(endpoint: string, params: Record<string, any> = {}, apiKey?: string, file?: File | Blob | string): Promise<ApiResponse> {\r\n    return this.sendRequest(endpoint, 'POST', params, apiKey, file);\r\n  }\r\n  \r\n  /**\r\n   * Abort any ongoing requests\r\n   */\r\n  abort(): void {\r\n    this.controller.abort();\r\n    this.controller = new AbortController();\r\n  }\r\n}","/**\r\n * Represents the status of a job\r\n */\r\nexport enum JobStatus {\r\n    CREATED = 'CREATED',\r\n    QUEUED = 'QUEUED',\r\n    PROCESSING = 'PROCESSING',\r\n    COMPLETED = 'COMPLETED',\r\n    FAILED = 'FAILED'\r\n  }\r\n  \r\n  /**\r\n   * Represents a job in the Socaity system\r\n   */\r\n  export interface SocaityJob {\r\n    id: string;\r\n    status: JobStatus;\r\n    progress: number;\r\n    message?: string;\r\n    result?: any;\r\n    error?: string | null;\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n  }\r\n  \r\n  /**\r\n   * Generic API response type\r\n   */\r\n  export interface ApiResponse {\r\n    id?: string;\r\n    status?: string;\r\n    jobId?: string;\r\n    progress?: number;\r\n    message?: string;\r\n    result?: any;\r\n    error?: string;\r\n    [key: string]: any;\r\n  }\r\n  \r\n  /**\r\n   * Configuration options for the SDK\r\n   */\r\n  export interface SocaityConfig {\r\n    apiKey?: string;\r\n    baseUrl: string;\r\n    pollInterval: number;\r\n    maxRetries: number;\r\n  }\r\n  \r\n  /**\r\n   * HTTP request options\r\n   */\r\n  export interface RequestOptions extends RequestInit {\r\n    headers: Record<string, string>;\r\n    body?: FormData | string;\r\n  }\r\n\r\n  /**\r\n   * Text to image options\r\n   */\r\n  export interface Text2ImgOptions {\r\n    apiKey?: string;\r\n    width?: number;\r\n    height?: number;\r\n    steps?: number;\r\n    seed?: number;\r\n  }","import { ApiResponse, JobStatus, SocaityJob } from '../../types';\r\n\r\n/**\r\n * Parses API responses into standardized formats\r\n */\r\nexport class ResponseParser {\r\n  /**\r\n   * Check if the response can be parsed by this parser\r\n   */\r\n  canParse(response: any): boolean {\r\n    if (!response) return false;\r\n    \r\n    // Check for standard Socaity API response format\r\n    if (response.id || response.jobId) {\r\n      return true;\r\n    }\r\n    \r\n    // Check for Runpod API response format\r\n    if (response.id && (response.status || response.state)) {\r\n      return true;\r\n    }\r\n    \r\n    // Check for Replicate API response format\r\n    if (response.id && response.status && response.urls) {\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n  \r\n  /**\r\n   * Parse response into standardized job format\r\n   */\r\n  parse(response: ApiResponse): SocaityJob {\r\n    const job: SocaityJob = {\r\n      id: response.id || response.jobId || '',\r\n      status: this.parseStatus(response),\r\n      progress: this.parseProgress(response),\r\n      result: response.result || response.output || null,\r\n      error: response.error || null,\r\n      message: response.message || '',\r\n      createdAt: new Date(),\r\n      updatedAt: new Date()\r\n    };\r\n    \r\n    return job;\r\n  }\r\n  \r\n  /**\r\n   * Parse status from different API formats\r\n   */\r\n  private parseStatus(response: ApiResponse): JobStatus {\r\n    // Handle standard format\r\n    const status = (response.status || '').toUpperCase();\r\n    \r\n    if (status === 'COMPLETED' || status === 'SUCCEEDED') {\r\n      return JobStatus.COMPLETED;\r\n    } else if (status === 'FAILED' || status === 'ERROR') {\r\n      return JobStatus.FAILED;\r\n    } else if (status === 'IN_PROGRESS' || status === 'PROCESSING' || status === 'RUNNING') {\r\n      return JobStatus.PROCESSING;\r\n    } else if (status === 'QUEUED' || status === 'PENDING') {\r\n      return JobStatus.QUEUED;\r\n    }\r\n    \r\n    // Handle Runpod format\r\n    if (response.state) {\r\n      const state = response.state.toUpperCase();\r\n      if (state === 'COMPLETED') return JobStatus.COMPLETED;\r\n      if (state === 'FAILED') return JobStatus.FAILED;\r\n      if (state === 'IN_PROGRESS') return JobStatus.PROCESSING;\r\n      if (state === 'QUEUED') return JobStatus.QUEUED;\r\n    }\r\n    \r\n    return JobStatus.CREATED;\r\n  }\r\n  \r\n  /**\r\n   * Parse progress from different API formats\r\n   */\r\n  private parseProgress(response: ApiResponse): number {\r\n    if (typeof response.progress === 'number') {\r\n      return response.progress;\r\n    }\r\n    \r\n    if (response.status === 'COMPLETED' || response.status === 'SUCCEEDED') {\r\n      return 1.0;\r\n    }\r\n    \r\n    return 0.0;\r\n  }\r\n}","// src/media-handler.ts\r\n/**\r\n * Handles processing of media responses\r\n */\r\nexport class MediaHandler {\r\n    /**\r\n     * Process a response that might contain media data\r\n     */\r\n    processResponse(response: any): any {\r\n      if (!response) return null;\r\n      \r\n      // Handle base64 image data\r\n      if (typeof response === 'string' && response.startsWith('data:image')) {\r\n        return this.processImage(response);\r\n      }\r\n      \r\n      // Handle binary data\r\n      if (response instanceof ArrayBuffer || response instanceof Blob) {\r\n        return this.processBinaryData(response);\r\n      }\r\n      \r\n      // Handle response objects with media content\r\n      if (typeof response === 'object' && response !== null) {\r\n        if (response.image_base64 || response.imageBase64) {\r\n          return this.processImage(response.image_base64 || response.imageBase64);\r\n        }\r\n        \r\n        if (response.image_url || response.imageUrl) {\r\n          return {\r\n            url: response.image_url || response.imageUrl,\r\n            ...response\r\n          };\r\n        }\r\n      }\r\n      \r\n      // Return unmodified response if no media processing is needed\r\n      return response;\r\n    }\r\n    \r\n    /**\r\n     * Process image data from the API\r\n     */\r\n    private processImage(imageData: string): any {\r\n      // For browser environments, we can create an image object\r\n      if (typeof document !== 'undefined') {\r\n        const img = new Image();\r\n        img.src = imageData;\r\n        return {\r\n          data: imageData,\r\n          element: img,\r\n          appendTo: (element: HTMLElement) => {\r\n            element.appendChild(img);\r\n            return img;\r\n          }\r\n        };\r\n      }\r\n      \r\n      // For Node.js environments, just return the data\r\n      return { data: imageData };\r\n    }\r\n    \r\n    /**\r\n     * Process binary data from the API\r\n     */\r\n    private processBinaryData(data: ArrayBuffer | Blob): any {\r\n      if (typeof Blob !== 'undefined' && data instanceof Blob) {\r\n        return {\r\n          data,\r\n          toURL: () => URL.createObjectURL(data),\r\n          toBase64: async () => {\r\n            return new Promise((resolve) => {\r\n              const reader = new FileReader();\r\n              reader.onloadend = () => resolve(reader.result);\r\n              reader.readAsDataURL(data);\r\n            });\r\n          }\r\n        };\r\n      }\r\n      \r\n      return { data };\r\n    }\r\n  }","// src/job-manager.ts\r\nimport { RequestHandler } from './web/RequestHandler';\r\nimport { Configuration } from '../configuration';\r\nimport { SocaityJob, JobStatus, ApiResponse } from '../types';\r\nimport { ResponseParser } from './web/ResponseParser';\r\nimport { MediaHandler } from './MediaHandler';\r\n\r\n/**\r\n * Manages asynchronous jobs for the Socaity API\r\n */\r\nexport class JobManager {\r\n  private requestHandler: RequestHandler;\r\n  private config: Configuration;\r\n  private jobs: Map<string, SocaityJob>;\r\n  private responseParser: ResponseParser;\r\n  private mediaHandler: MediaHandler;\r\n\r\n  constructor(requestHandler: RequestHandler, config: Configuration) {\r\n    this.requestHandler = requestHandler;\r\n    this.config = config;\r\n    this.jobs = new Map();\r\n    this.responseParser = new ResponseParser();\r\n    this.mediaHandler = new MediaHandler();\r\n  }\r\n\r\n  /**\r\n   * Submit a new job to the API\r\n   * @param endpoint - API endpoint to call\r\n   * @param params - Parameters for the job\r\n   * @param apiKey - Optional API key to use for this request\r\n   * @param file - Optional file to include\r\n   * @returns Promise resolving to the created job\r\n   */\r\n  async submitJob(\r\n    endpoint: string, \r\n    params: Record<string, any>, \r\n    apiKey?: string,\r\n    file?: File | string | any  // using any instead of Buffer which is only node.js compatible.\r\n  ): Promise<SocaityJob> {\r\n    try {\r\n      const response = await this.requestHandler.post(endpoint, params, apiKey, file);\r\n      \r\n      // Parse initial response to get job information\r\n      if (!this.responseParser.canParse(response)) {\r\n        throw new Error('Unexpected response format from API');\r\n      }\r\n      \r\n      const job = this.responseParser.parse(response);\r\n      \r\n      // Store the job\r\n      this.jobs.set(job.id, job);\r\n      \r\n      return job;\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        throw error;\r\n      }\r\n      throw new Error(`Failed to submit job: ${String(error)}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all tracked jobs\r\n   */\r\n  getAllJobs(): SocaityJob[] {\r\n    return Array.from(this.jobs.values());\r\n  }\r\n\r\n  /**\r\n   * Get a specific job by ID\r\n   * @param jobId - ID of the job to retrieve\r\n   */\r\n  getJob(jobId: string): SocaityJob | undefined {\r\n    return this.jobs.get(jobId);\r\n  }\r\n\r\n  /**\r\n   * Track a job until it completes\r\n   * @param job - The job to track\r\n   * @returns Promise resolving to the final result of the job\r\n   */\r\n  async trackJobToCompletion(job: SocaityJob): Promise<any> {\r\n    while (true) {\r\n      await new Promise(resolve => setTimeout(resolve, this.config.pollInterval));\r\n      \r\n      const updatedJob = await this.requestHandler.get(`status/${job.id}`);\r\n      \r\n      if (updatedJob.status === JobStatus.COMPLETED) {\r\n        return this.mediaHandler.processResponse(updatedJob.result);\r\n      }\r\n      \r\n      if (updatedJob.status === JobStatus.FAILED) {\r\n        throw new Error(`Job failed: ${updatedJob.error}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancel a running job\r\n   * @param jobId - ID of the job to cancel\r\n   * @returns Promise resolving to true if the job was cancelled\r\n   */\r\n  async cancelJob(jobId: string): Promise<boolean> {\r\n    try {\r\n      await this.requestHandler.post(`cancel/${jobId}`, {});\r\n      this.jobs.delete(jobId);\r\n      return true;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear completed or failed jobs from tracking\r\n   */\r\n  clearCompletedJobs(): void {\r\n    for (const [jobId, job] of this.jobs.entries()) {\r\n      if (job.status === JobStatus.COMPLETED || job.status === JobStatus.FAILED) {\r\n        this.jobs.delete(jobId);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { SocaityConfig } from './types';\r\n\r\n/**\r\n * Manages configuration settings for the SDK\r\n */\r\nexport class Configuration implements SocaityConfig {\r\n  apiKey?: string;\r\n  baseUrl: string;\r\n  pollInterval: number;\r\n  maxRetries: number;\r\n\r\n  constructor(config: Partial<SocaityConfig> = {}) {\r\n    this.apiKey = config.apiKey;\r\n    this.baseUrl = config.baseUrl || 'https://api.socaity.ai/v1';\r\n    this.pollInterval = config.pollInterval || 1000;\r\n    this.maxRetries = config.maxRetries || 3;\r\n  }\r\n\r\n  /**\r\n   * Updates configuration with new values\r\n   */\r\n  update(config: Partial<SocaityConfig>): void {\r\n    if (config.apiKey !== undefined) this.apiKey = config.apiKey;\r\n    if (config.baseUrl !== undefined) this.baseUrl = config.baseUrl;\r\n    if (config.pollInterval !== undefined) this.pollInterval = config.pollInterval;\r\n    if (config.maxRetries !== undefined) this.maxRetries = config.maxRetries;\r\n  }\r\n\r\n  /**\r\n   * Creates a copy of this configuration\r\n   */\r\n  clone(): Configuration {\r\n    return new Configuration({\r\n      apiKey: this.apiKey,\r\n      baseUrl: this.baseUrl,\r\n      pollInterval: this.pollInterval,\r\n      maxRetries: this.maxRetries\r\n    });\r\n  }\r\n}","// src/index.ts\r\nimport { RequestHandler } from './core/web/RequestHandler';\r\nimport { JobManager } from './core/JobManager';\r\nimport { SocaityJob } from './types';\r\nimport { Configuration } from './configuration';\r\nimport { ResponseParser } from './core/web/ResponseParser';\r\nimport { MediaHandler } from './core/MediaHandler';\r\n\r\n/**\r\n * Main Socaity SDK class\r\n * Provides methods to interact with Socaity API services\r\n */\r\nclass SocaitySDK {\r\n  private requestHandler: RequestHandler;\r\n  private jobManager: JobManager;\r\n  private config: Configuration;\r\n\r\n  constructor() {\r\n    this.config = new Configuration();\r\n    this.requestHandler = new RequestHandler(this.config);\r\n    this.jobManager = new JobManager(this.requestHandler, this.config);\r\n  }\r\n\r\n  /**\r\n   * Set the API key for all future requests\r\n   * @param apiKey - Your Socaity API key\r\n   */\r\n  setApiKey(apiKey: string): void {\r\n    this.config.apiKey = apiKey;\r\n  }\r\n\r\n  /**\r\n   * Set the base URL for the API\r\n   * @param url - Base URL for the Socaity API\r\n   */\r\n  setBaseUrl(url: string): void {\r\n    this.config.baseUrl = url;\r\n  }\r\n\r\n  /**\r\n   * Generate an image from text prompt\r\n   * @param prompt - Text description of the image to generate\r\n   * @param options - Additional options for the request\r\n   * @returns Promise resolving to the generated image\r\n   */\r\n  async text2img(prompt: string, options: { apiKey?: string } = {}): Promise<any> {    \r\n    const endpoint = 'text2img';\r\n    const params = { prompt };\r\n    return this.executeRequest(endpoint, params, options);\r\n  }\r\n\r\n  /**\r\n   * Chat with an AI model\r\n   * @param messages - Array of message objects with roles and content\r\n   * @param options - Additional options for the request\r\n   * @returns Promise resolving to the chat response\r\n   */\r\n  async chat(messages: Array<{role: string, content: string}>, options: { \r\n    apiKey?: string,\r\n    model?: string,\r\n    temperature?: number\r\n  } = {}): Promise<any> {    \r\n    const endpoint = 'chat';\r\n    const params = { \r\n      messages,\r\n      model: options.model || 'default',\r\n      temperature: options.temperature || 0.7\r\n    };\r\n    \r\n    return this.executeRequest(endpoint, params, options);\r\n  }\r\n\r\n  /**\r\n   * Upload a file to be processed by Socaity services\r\n   * @param file - File to upload (File object, Buffer, or file path)\r\n   * @param options - Additional options for the request\r\n   * @returns Promise resolving to the uploaded file information\r\n   */\r\n  async uploadFile(file: File | string | any, options: { apiKey?: string } = {}): Promise<any> {\r\n    this.validateApiKey(options.apiKey);\r\n    \r\n    const endpoint = 'upload';\r\n    return this.executeRequest(endpoint, {}, options, file);\r\n  }\r\n\r\n  /**\r\n   * Get a list of all active jobs\r\n   * @returns Array of all tracked jobs\r\n   */\r\n  getJobs(): SocaityJob[] {\r\n    return this.jobManager.getAllJobs();\r\n  }\r\n\r\n  /**\r\n   * Get a specific job by ID\r\n   * @param jobId - ID of the job to retrieve\r\n   * @returns The job if found, undefined otherwise\r\n   */\r\n  getJob(jobId: string): SocaityJob | undefined {\r\n    return this.jobManager.getJob(jobId);\r\n  }\r\n\r\n  /**\r\n   * Cancel a running job\r\n   * @param jobId - ID of the job to cancel\r\n   * @returns Promise resolving to true if successful\r\n   */\r\n  async cancelJob(jobId: string): Promise<boolean> {\r\n    return this.jobManager.cancelJob(jobId);\r\n  }\r\n\r\n  /**\r\n   * Execute a request to the Socaity API\r\n   * @private\r\n   */\r\n  private async executeRequest(\r\n    endpoint: string, \r\n    params: Record<string, any>, \r\n    options: { apiKey?: string } = {},\r\n    file?: File | string | any\r\n  ): Promise<any> {\r\n    const apiKey = options.apiKey || this.config.apiKey;\r\n    this.validateApiKey(apiKey);\r\n    // Submit the job\r\n    const job = await this.jobManager.submitJob(endpoint, params, apiKey, file);\r\n    \r\n    // Start tracking the job\r\n    return this.jobManager.trackJobToCompletion(job);\r\n  }\r\n\r\n  /**\r\n   * Validates that an API key is available\r\n   * @private\r\n   */\r\n  private validateApiKey(providedApiKey?: string): void {\r\n    if (!providedApiKey && !this.config.apiKey) {\r\n      throw new Error('API key not set. Use setApiKey() method or provide an apiKey in the options.');\r\n    }\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst socaity = new SocaitySDK();\r\n\r\n// Export both the instance and the class\r\nexport { socaity, SocaitySDK };\r\n\r\n// Browser global (if running in a browser)\r\nif (typeof window !== \"undefined\") {\r\n  (window as any).socaity = socaity;\r\n}"],"names":["RequestHandler","config","__publicField","endpoint","method","params","apiKey","file","url","key","options","formData","value","queryParams","queryString","response","errorText","error","JobStatus","ResponseParser","status","state","MediaHandler","imageData","img","element","data","resolve","reader","JobManager","requestHandler","job","jobId","updatedJob","Configuration","SocaitySDK","prompt","messages","providedApiKey","socaity"],"mappings":"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"}