{"version":3,"file":"socaity.umd.js","sources":["../sdk/core/configuration.ts","../sdk/media-toolkit-js/types.ts","../sdk/media-toolkit-js/utils.ts","../sdk/media-toolkit-js/MediaFile.ts","../sdk/fastCloud/FastCloud.ts","../sdk/core/web/RequestHandler.ts","../sdk/types.ts","../sdk/core/web/ResponseParser.ts","../sdk/core/job/JobManager.ts","../sdk/core/job/ProgressBarManager.ts","../sdk/core/job/TrackedJob.ts","../sdk/core/web/APIClientFactory.ts","../sdk/core/web/APIClient.ts","../node_modules/zod/lib/index.mjs","../sdk/api/image/text2img/types.ts","../sdk/api/image/text2img/FluxSchnell.ts","../sdk/api/text/types.ts","../sdk/api/text/chat/deepseekr1.ts","../sdk/api/image/img2img/types.ts","../sdk/api/image/img2img/face2face.ts","../sdk/api/API.ts","../sdk/core/socaity.ts","../sdk/index.ts"],"sourcesContent":["import { IConfig } from '../types';\r\n\r\n\r\nexport class ApiKeyError extends Error {\r\n  constructor(message: string = \"Invalid API key format. API keys should start with 'sk_' and be 67 characters long.\") {\r\n    super(message);\r\n    this.name = \"ApiKeyError\";\r\n    \r\n    // This ensures proper stack traces in modern JS engines\r\n    if (Error.captureStackTrace) {\r\n      Error.captureStackTrace(this, ApiKeyError);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Manages global configuration settings for the SDK.\r\n * It is a singleton.\r\n */\r\nexport class Configuration implements IConfig {\r\n  private static instance: Configuration;\r\n\r\n  apiKey?: string;\r\n  baseUrl: string;\r\n  pollInterval: number;\r\n  maxRetries: number;\r\n\r\n  private constructor(config: Partial<IConfig> = {}) {\r\n    this.apiKey = config.apiKey;\r\n    this.baseUrl = \"https://api.socaity.ai/v0\"\r\n    this.pollInterval = config.pollInterval || 5000;\r\n    this.maxRetries = config.maxRetries || 3;\r\n  }\r\n\r\n  /**\r\n   * Get the global configuration instance\r\n   */\r\n  static getInstance(): Configuration {\r\n    if (!Configuration.instance) {\r\n      Configuration.instance = new Configuration();\r\n    }\r\n    return Configuration.instance;\r\n  }\r\n  /**\r\n   * Updates global configuration with new values\r\n   */\r\n  static update(config: Partial<IConfig>): void {\r\n    if (config.apiKey !== undefined) {\r\n      if (!config.apiKey.startsWith(\"sk_\") || !(config.apiKey.length == 67)) {\r\n        throw new ApiKeyError(\"API key is wrong. Get your API key from the Socaity https://www.socaity.ai dashboard.\");\r\n      }\r\n    }\r\n    const instance = Configuration.getInstance();\r\n    Object.assign(instance, config);\r\n  }\r\n}\r\n","/**\r\n * Interface representing a file result with metadata and content.\r\n * Used for serialization and deserialization of MediaFile objects.\r\n */\r\nexport interface FileResult {\r\n    /**\r\n     * The name of the file\r\n     */\r\n    file_name: string;\r\n\r\n    /**\r\n     * The MIME type of the file content\r\n     */\r\n    \r\n    content_type: string;\r\n    /**\r\n     * The file content, typically as a base64 encoded string,\r\n     * but can also be provided as other formats like ArrayBuffer,\r\n     * Blob, or URL that will be processed by MediaFile\r\n     */\r\n    content: string | ArrayBuffer | Blob | any;\r\n  }\r\n\r\n/**\r\n * Check if an object is a FileResult.\r\n * \r\n * @param obj - Object to check\r\n * @returns Whether the object is a FileResult\r\n * @private\r\n */\r\nexport function isFileResult(obj: any): boolean {\r\n  return (\r\n    obj &&\r\n    typeof obj === 'object' &&\r\n    'file_name' in obj &&\r\n    'content_type' in obj &&\r\n    'content' in obj\r\n  );\r\n}","\r\n/**\r\n* Check if a string is a URL.\r\n* \r\n* @param url - URL to check\r\n* @returns Whether the string is a URL\r\n* @private\r\n*/\r\nexport function isUrl(url: string): boolean {\r\n    try {\r\n        const parsed = new URL(url);\r\n        return parsed.protocol === 'http:' || parsed.protocol === 'https:';\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Check if a string is a base64 data URI.\r\n * \r\n * @param data - String to check\r\n * @returns Whether the string is a base64 data URI\r\n * @private\r\n */\r\nexport function isBase64Data(data: string): boolean {\r\n  return data.startsWith('data:') || isBase64String(data);\r\n}\r\n\r\n/**\r\n* Check if a string appears to be base64 encoded.\r\n* \r\n* @param str - String to check\r\n* @returns Whether the string is base64 encoded\r\n* @private\r\n*/\r\nexport function isBase64String(str: string): boolean {\r\n    const regex = /^[A-Za-z0-9+/=]+$/;\r\n    return regex.test(str) && str.length % 4 === 0;\r\n}","// src/MediaFile.ts\r\nimport { FileResult, isFileResult } from './types';\r\nimport { isUrl, isBase64Data } from './utils';\r\n\r\n/**\r\n * A class for standardized file handling across browser and Node.js environments.\r\n * Provides methods to load files from various sources and convert between formats.\r\n */\r\nexport class MediaFile {\r\n  protected content_type: string;\r\n  protected file_name: string;\r\n  protected _content: ArrayBuffer | null = null;\r\n  protected _isNode: boolean;\r\n\r\n  /**\r\n   * Creates a new MediaFile instance.\r\n   * \r\n   * @param file_name - Default filename to use\r\n   * @param content_type - Default content type to use\r\n   */\r\n  constructor(file_name: string = \"file\", content_type: string = \"application/octet-stream\") {\r\n    this.content_type = content_type;\r\n    this.file_name = file_name;\r\n    this._isNode = typeof window === 'undefined';\r\n  }\r\n\r\n  /**\r\n   * Factory method to create a MediaFile from any supported data type.\r\n   * Automatically detects data type and uses the appropriate method.\r\n   * \r\n   * @param data - Data to load (file path, URL, base64 string, etc.)\r\n   * @returns Promise resolving to a MediaFile instance or null\r\n   */\r\n  static async create(data: any): Promise<MediaFile> {\r\n    if (data === null || data === undefined) {\r\n      throw new Error('Cannot create MediaFile from null or undefined data');\r\n    }\r\n\r\n    const mediaFile = new MediaFile();\r\n    return mediaFile.fromAny(data);\r\n  }\r\n\r\n  /**\r\n   * Load a file from any supported data type.\r\n   * \r\n   * @param data - Data to load (file path, URL, base64 string, etc.)\r\n   * @param websafe - Prevents loading from file paths and malformatted base64 strings.\r\n   * @returns Promise resolving to a MediaFile instance or null\r\n   */\r\n  async fromAny(data: any): Promise<MediaFile> {\r\n    // Already a MediaFile\r\n    if (data instanceof MediaFile) {\r\n      return data;\r\n    }\r\n\r\n    // Node.js Buffer\r\n    if (this._isNode && this._isBuffer(data)) {\r\n      return this.fromBytes(data);\r\n    }\r\n\r\n    // Browser Blob\r\n    if (typeof Blob !== 'undefined' && data instanceof Blob) {\r\n      const buffer = await data.arrayBuffer();\r\n      return this.fromBytes(buffer);\r\n    }\r\n\r\n    // ArrayBuffer\r\n    if (data instanceof ArrayBuffer || data instanceof Uint8Array) {\r\n      return this.fromBytes(data);\r\n    }\r\n\r\n    // String data (path, URL, or base64)\r\n    if (typeof data === 'string') {\r\n      if (isUrl(data)) {\r\n        return await this.fromUrl(data);\r\n      } \r\n      else if (isBase64Data(data)) {\r\n        return this.fromBase64(data);\r\n      }\r\n      else if (await this._isValidFilePath(data)) {\r\n        return await this.fromFile(data);\r\n      } \r\n      else {\r\n        throw new Error('Invalid data type for MediaFile');\r\n          //try {\r\n          //  return this.fromBase64(data);\r\n          //} catch (e) {\r\n          //  console.error(`Could not process string data: ${data.substring(0, 50)}...`);\r\n          //  return null;\r\n          //}\r\n      }\r\n    }\r\n    \r\n\r\n    // Handle FileResult object\r\n    if (isFileResult(data)) {\r\n      return await this.fromDict(data);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** \r\n  Load a file from any supported data type, with additional checks for websafe content.\r\n  Prevents loading from file paths and malformatted base64 strings.\r\n  @param data - Data to load (file path, URL, base64 string, etc.)\r\n  @returns Promise resolving to a MediaFile instance or null\r\n  */\r\n  async fromAnyWebsafe(data: any): Promise<MediaFile | null | any> {\r\n    // String data (path, URL, or base64)\r\n    if (typeof data === 'string') {\r\n      if (\r\n        !isUrl(data)\r\n        && !isBase64Data(data)\r\n        && !isFileResult(data)\r\n      ) {\r\n        throw new Error('Invalid data type for websafe MediaFile');\r\n      }\r\n    }\r\n\r\n    // Handle FileResult object\r\n    if (isFileResult(data)) {\r\n      return await this.fromAnyWebsafe(data.content);\r\n    }\r\n\r\n    return await this.fromAny(data);\r\n  }\r\n\r\n\r\n  /**\r\n   * Load file from a file path (Node.js only).\r\n   * \r\n   * @param filePath - Path to the file\r\n   * @returns Promise resolving to the MediaFile instance\r\n   */\r\n  async fromFile(filePath: string): Promise<MediaFile> {\r\n    if (!this._isNode) {\r\n      throw new Error('Loading from file path is only supported in Node.js environment');\r\n    }\r\n\r\n    try {\r\n      // Dynamic import to avoid bundling issues in browsers\r\n      const fs = await import('fs/promises');\r\n      const buffer = await fs.readFile(filePath);\r\n      const path = await import('path');\r\n\r\n      this.file_name = path.basename(filePath);\r\n      this._content = this._bufferToArrayBuffer(buffer);\r\n      this._setContentTypeFromFileName();\r\n      \r\n      return this;\r\n    } catch (error) {\r\n      throw new Error(`Failed to load file from path: ${filePath}. ${(error as Error).message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load file from a URL.\r\n   * \r\n   * @param url - URL to fetch the file from\r\n   * @param headers - Optional headers for the request\r\n   * @returns Promise resolving to the MediaFile instance\r\n   */\r\n  async fromUrl(url: string, headers?: Record<string, string>): Promise<MediaFile> {\r\n    try {\r\n      const response = await fetch(url, {\r\n        headers: headers || {\r\n          'User-Agent': 'MediaFile/1.0.0'\r\n        }\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! Status: ${response.status}`);\r\n      }\r\n  \r\n      // Get content type from response headers\r\n      this.content_type = response.headers.get('content-type') || 'application/octet-stream';\r\n      \r\n      // Try to get the filename from Content-Disposition header\r\n      const contentDisposition = response.headers.get('content-disposition');\r\n      if (contentDisposition) {\r\n        const fileNameMatch = contentDisposition.match(/filename=(?:['\"]?)([^'\";\\n]+)/i);\r\n        if (fileNameMatch && fileNameMatch[1]) {\r\n          this.file_name = fileNameMatch[1];\r\n        }\r\n      }\r\n      \r\n      // If no filename from header, use the URL path\r\n      if (!this.file_name || this.file_name === 'file') {\r\n        const urlObj = new URL(url);\r\n        // Extract filename from the URL path without using Node's path module\r\n        const pathSegments = urlObj.pathname.split('/');\r\n        const fileName = pathSegments[pathSegments.length - 1]; // Get the last segment\r\n        \r\n        if (fileName && fileName.trim() !== '') {\r\n          this.file_name = decodeURIComponent(fileName);\r\n        } else {\r\n          // Fallback filename if path is empty or ends with a slash\r\n          this.file_name = 'downloaded_file';\r\n        }\r\n      }\r\n  \r\n      // Get content as ArrayBuffer\r\n      this._content = await response.arrayBuffer();\r\n      return this;\r\n    } catch (error) {\r\n      throw new Error(`Failed to load file from URL: ${url}. ${(error as Error).message}`);\r\n    }\r\n  }\r\n  /**\r\n   * Load file from base64 encoded string.\r\n   * \r\n   * @param base64Data - Base64 encoded string, optionally with data URI prefix\r\n   * @returns The MediaFile instance\r\n   */\r\n  fromBase64(base64Data: string): MediaFile {\r\n    const { data, mediaType } = this._parseBase64Uri(base64Data);\r\n    \r\n    // Update content type if available from data URI\r\n    if (mediaType) {\r\n      this.content_type = mediaType;\r\n    }\r\n\r\n    try {\r\n      // Decode base64 to binary data\r\n      this._content = this._isNode \r\n        ? this._decodeBase64NodeJs(data)\r\n        : this._decodeBase64Browser(data);\r\n      \r\n      return this;\r\n    } catch (error) {\r\n      throw new Error(`Failed to decode base64 data: ${(error as Error).message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load file from binary data.\r\n   * \r\n   * @param data - ArrayBuffer, Buffer, or Uint8Array containing the file data\r\n   * @returns The MediaFile instance\r\n   */\r\n  fromBytes(data: ArrayBuffer | Buffer | ArrayBufferLike | SharedArrayBuffer | Uint8Array): MediaFile {\r\n    if (data instanceof SharedArrayBuffer) {\r\n      // Create a proper ArrayBuffer copy from SharedArrayBuffer\r\n      const tempView = new Uint8Array(data);\r\n      const arrayBuffer = new ArrayBuffer(tempView.byteLength);\r\n      new Uint8Array(arrayBuffer).set(tempView);\r\n      this._content = arrayBuffer;\r\n      return this;\r\n    }\r\n    \r\n    if (data instanceof Uint8Array) {\r\n      // Check if the underlying buffer is a SharedArrayBuffer\r\n      if (data.buffer instanceof SharedArrayBuffer) {\r\n        // Create a new ArrayBuffer copy\r\n        const tempBuffer = new Uint8Array(data);\r\n        this._content = tempBuffer.buffer.slice(tempBuffer.byteOffset, tempBuffer.byteOffset + tempBuffer.byteLength);\r\n      } else {\r\n        this._content = data.buffer.slice(data.byteOffset, data.byteOffset + data.byteLength);\r\n      }\r\n    } else if (this._isNode && Buffer.isBuffer(data)) {\r\n      // Check if the underlying buffer is a SharedArrayBuffer\r\n      if (data.buffer instanceof SharedArrayBuffer) {\r\n        // Create a new ArrayBuffer copy\r\n        const tempBuffer = new Uint8Array(data);\r\n        this._content = tempBuffer.buffer.slice(tempBuffer.byteOffset, tempBuffer.byteOffset + tempBuffer.byteLength);\r\n      } else {\r\n        this._content = data.buffer.slice(data.byteOffset, data.byteOffset + data.byteLength);\r\n      }\r\n    } else {\r\n      // At this point, data should be an ArrayBuffer or ArrayBufferLike\r\n      // Create a defensive copy to ensure it's an ArrayBuffer\r\n      this._content = new Uint8Array(data as ArrayBuffer).buffer;\r\n    }\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * Load file from a FileResult object.\r\n   * \r\n   * @param fileResult - FileResult object with file metadata and base64 content\r\n   * @returns The MediaFile instance\r\n   */\r\n  async fromDict(fileResult: FileResult): Promise<MediaFile> {\r\n    if (!fileResult.content) {\r\n      throw new Error('Invalid FileResult object: missing content');\r\n    }\r\n    this.file_name = fileResult.file_name;\r\n    this.content_type = fileResult.content_type;\r\n    return await this.fromAny(fileResult.content);\r\n  }\r\n\r\n  /**\r\n   * Convert the file to a Blob (browser only).\r\n   * \r\n   * @returns Blob object representing the file\r\n   */\r\n  toBlob(): Blob {\r\n    this._ensureContent();\r\n    \r\n    if (typeof Blob === 'undefined') {\r\n      throw new Error('Blob is not available in this environment');\r\n    }\r\n    \r\n    return new Blob([new Uint8Array(this._content!)], { type: this.content_type });\r\n  }\r\n  /**\r\n   * Convert the file to an ArrayBuffer.\r\n   * \r\n   * @returns ArrayBuffer containing the file data\r\n   */\r\n  toArrayBuffer(): ArrayBuffer {\r\n    this._ensureContent();\r\n    \r\n    if (this._content instanceof SharedArrayBuffer) {\r\n      return this._content.slice(0); // Convert SharedArrayBuffer to ArrayBuffer\r\n    }\r\n  \r\n    return this._content!;\r\n  }\r\n\r\n  /**\r\n   * Convert the file to a Uint8Array.\r\n   * \r\n   * @returns Uint8Array containing the file data\r\n   */\r\n  toUint8Array(): Uint8Array {\r\n    this._ensureContent();\r\n    return new Uint8Array(this._content!);\r\n  }\r\n\r\n  /**\r\n   * Convert the file to a Node.js Buffer (Node.js only).\r\n   * \r\n   * @returns Buffer containing the file data\r\n   */\r\n  toBuffer(): Buffer {\r\n    this._ensureContent();\r\n    \r\n    if (!this._isNode) {\r\n      throw new Error('Buffer is only available in Node.js environment');\r\n    }\r\n    \r\n    return Buffer.from(this._content!);\r\n  }\r\n\r\n  /**\r\n   * Convert the file to a base64 encoded string.\r\n   * \r\n   * @param includeDataUri - Whether to include the data URI prefix\r\n   * @returns Base64 encoded string of the file data\r\n   */\r\n  toBase64(includeDataUri: boolean = true): string {\r\n    this._ensureContent();\r\n    \r\n    let base64Data: string;\r\n    \r\n    if (this._isNode) {\r\n      base64Data = Buffer.from(this._content!).toString('base64');\r\n    } else {\r\n      const bytes = new Uint8Array(this._content!);\r\n      let binary = '';\r\n      const chunkSize = 10240; // Process in chunks to avoid call stack issues\r\n      \r\n      for (let i = 0; i < bytes.length; i += chunkSize) {\r\n        const chunk = bytes.subarray(i, Math.min(i + chunkSize, bytes.length));\r\n        binary += String.fromCharCode.apply(null, Array.from(chunk));\r\n      }\r\n      \r\n      base64Data = btoa(binary);\r\n    }\r\n    \r\n    if (includeDataUri) {\r\n      return `data:${this.content_type};base64,${base64Data}`;\r\n    }\r\n    \r\n    return base64Data;\r\n  }\r\n\r\n  /**\r\n   * Convert the file to a FileResult object.\r\n   * \r\n   * @returns FileResult object with file metadata and base64 content\r\n   */\r\n  toJson(): FileResult {\r\n    return {\r\n      file_name: this.file_name,\r\n      content_type: this.content_type,\r\n      content: this.toBase64()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Save the file to disk (Node.js) or trigger download (browser).\r\n   * \r\n   * @param filePath - Optional file path (Node.js) or filename (browser)\r\n   * @returns Promise that resolves when the file is saved\r\n   */\r\n  async save(filePath?: string): Promise<void> {\r\n    this._ensureContent();\r\n    \r\n    const saveFilename = filePath || this.file_name;\r\n  \r\n    if (this._isNode) {\r\n      // Node.js environment\r\n      try {\r\n        const fs = await import('fs/promises').then(mod => mod.default || mod);\r\n        const path = await import('path').then(mod => mod.default || mod);\r\n        \r\n       // Ensure the path module is properly loaded\r\n        if (!path || typeof path.dirname !== 'function') {\r\n          throw new Error(\"Failed to load 'path' module.\");\r\n        }\r\n\r\n        // Create directories if they don't exist\r\n        const directory = path.dirname(saveFilename);\r\n        if (directory !== '.') {\r\n          await fs.mkdir(directory, { recursive: true }).catch(() => {});\r\n        }\r\n        \r\n        await fs.writeFile(saveFilename, Buffer.from(this._content!));\r\n      } catch (error) {\r\n        throw new Error(`Failed to save file: ${(error as Error).message}`);\r\n      }\r\n    } else {\r\n      // Browser environment\r\n      const blob = this.toBlob();\r\n      const url = URL.createObjectURL(blob);\r\n      \r\n      const a = document.createElement('a');\r\n      a.href = url;\r\n      a.download = saveFilename;\r\n      \r\n      // Append to document, click, and remove\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      \r\n      // Cleanup\r\n      setTimeout(() => {\r\n        document.body.removeChild(a);\r\n        URL.revokeObjectURL(url);\r\n      }, 100);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the file size in bytes.\r\n   * \r\n   * @param unit - Unit to return the size in ('bytes', 'kb', 'mb', or 'gb')\r\n   * @returns File size in the specified unit\r\n   */\r\n  fileSize(unit: 'bytes' | 'kb' | 'mb' | 'gb' = 'bytes'): number {\r\n    if (!this._content) {\r\n      return 0;\r\n    }\r\n    \r\n    const sizeInBytes = this._content.byteLength;\r\n    \r\n    switch (unit) {\r\n      case 'kb':\r\n        return sizeInBytes / 1024;\r\n      case 'mb':\r\n        return sizeInBytes / (1024 * 1024);\r\n      case 'gb':\r\n        return sizeInBytes / (1024 * 1024 * 1024);\r\n      default:\r\n        return sizeInBytes;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the file extension based on the content type or filename.\r\n   * \r\n   * @returns File extension without the leading dot, or null if it cannot be determined\r\n   */\r\n  get extension(): string | null {\r\n    // Try to get extension from content type first\r\n    if (this.content_type && this.content_type !== 'application/octet-stream') {\r\n      const commonMimeTypes: Record<string, string> = {\r\n        'image/jpeg': 'jpg',\r\n        'image/png': 'png',\r\n        'image/gif': 'gif',\r\n        'image/webp': 'webp',\r\n        'image/svg+xml': 'svg',\r\n        'audio/mpeg': 'mp3',\r\n        'audio/wav': 'wav',\r\n        'audio/ogg': 'ogg',\r\n        'video/mp4': 'mp4',\r\n        'video/quicktime': 'mov',\r\n        'application/pdf': 'pdf',\r\n        'text/plain': 'txt',\r\n        'text/html': 'html',\r\n        'application/json': 'json'\r\n      };\r\n      \r\n      if (this.content_type in commonMimeTypes) {\r\n        return commonMimeTypes[this.content_type];\r\n      }\r\n      \r\n      // Try mime-types package in Node.js\r\n      if (this._isNode) {\r\n        try {\r\n          // Dynamic import to avoid bundling issues in browsers\r\n          const nodeMimeTypes = require('mime-types');\r\n          const ext = nodeMimeTypes.extension(this.content_type);\r\n          if (ext) return ext;\r\n        } catch (e) {\r\n          // If mime-types is not available, continue with filename check\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Try to get extension from filename\r\n    if (this.file_name && this.file_name.includes('.')) {\r\n      return this.file_name.split('.').pop()?.toLowerCase() || null;\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get the filename.\r\n   */\r\n  getFileName(): string {\r\n    return this.file_name;\r\n  }\r\n\r\n  /**\r\n   * Set the filename.\r\n   */\r\n  setFileName(fileName: string): void {\r\n    this.file_name = fileName;\r\n  }\r\n\r\n  /**\r\n   * Get the content type.\r\n   */\r\n  getContentType(): string {\r\n    return this.content_type;\r\n  }\r\n\r\n  /**\r\n   * Set the content type.\r\n   */\r\n  setContentType(contentType: string): void {\r\n    this.content_type = contentType;\r\n  }\r\n\r\n  /**\r\n   * Read raw file data.\r\n   * \r\n   * @returns ArrayBuffer containing the file data\r\n   */\r\n  read(): ArrayBuffer {\r\n    this._ensureContent();\r\n    return this._content!;\r\n  }\r\n\r\n  /**\r\n   * Check if the file is empty.\r\n   * \r\n   * @returns Boolean indicating if the file has content\r\n   */\r\n  isEmpty(): boolean {\r\n    return !this._content || this._content.byteLength === 0;\r\n  }\r\n\r\n  /**\r\n   * Get info about the file.\r\n   * \r\n   * @returns Object with file information\r\n   */\r\n  getInfo(): { fileName: string; contentType: string; size: number; extension: string | null } {\r\n    return {\r\n      fileName: this.file_name,\r\n      contentType: this.content_type,\r\n      size: this.fileSize(),\r\n      extension: this.extension\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Detect MIME type for the file based on file extension.\r\n   * Updates the content_type property.\r\n   * \r\n   * @private \r\n   */\r\n  protected _setContentTypeFromFileName(): void {\r\n    if (!this.file_name) return;\r\n    \r\n    const extension = this.file_name.split('.').pop()?.toLowerCase();\r\n    if (!extension) return;\r\n    \r\n    // Try to use mime-types package in Node.js\r\n    if (this._isNode) {\r\n      try {\r\n        const nodeMimeTypes = require('mime-types');\r\n        const mimeType = nodeMimeTypes.lookup(this.file_name);\r\n        if (mimeType) {\r\n          this.content_type = mimeType;\r\n          return;\r\n        }\r\n      } catch (e) {\r\n        // If mime-types is not available, use the static mapping\r\n      }\r\n    }\r\n    \r\n    // Simple extension to MIME type mapping\r\n    const extensionToMime: Record<string, string> = {\r\n      'jpg': 'image/jpeg',\r\n      'jpeg': 'image/jpeg',\r\n      'png': 'image/png',\r\n      'gif': 'image/gif',\r\n      'webp': 'image/webp',\r\n      'svg': 'image/svg+xml',\r\n      'mp3': 'audio/mpeg',\r\n      'wav': 'audio/wav',\r\n      'ogg': 'audio/ogg',\r\n      'mp4': 'video/mp4',\r\n      'mov': 'video/quicktime',\r\n      'pdf': 'application/pdf',\r\n      'txt': 'text/plain',\r\n      'html': 'text/html',\r\n      'htm': 'text/html',\r\n      'json': 'application/json',\r\n      'js': 'application/javascript',\r\n      'css': 'text/css',\r\n      'xml': 'application/xml',\r\n      'zip': 'application/zip'\r\n    };\r\n    \r\n    if (extension in extensionToMime) {\r\n      this.content_type = extensionToMime[extension];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse a base64 data URI into content and media type.\r\n   * \r\n   * @param data - Base64 string, potentially with data URI prefix\r\n   * @returns Object containing the parsed data and media type\r\n   * @private\r\n   */\r\n  protected _parseBase64Uri(data: string): { data: string, mediaType: string | null } {\r\n    // Data URI format: data:[<media type>][;base64],<data>\r\n    if (data.startsWith('data:')) {\r\n      const [header, content] = data.split(',', 2);\r\n      const mediaTypeMatch = header.match(/^data:([^;,]+)/);\r\n      const mediaType = mediaTypeMatch ? mediaTypeMatch[1] : null;\r\n      \r\n      return { data: content, mediaType };\r\n    }\r\n    \r\n    // If no data URI prefix, return the original string\r\n    return { data, mediaType: null };\r\n  }\r\n\r\n  /**\r\n   * Ensure content exists before operating on it.\r\n   * \r\n   * @private\r\n   */\r\n  protected _ensureContent(): void {\r\n    if (!this._content) {\r\n      throw new Error('No content available. Load content first using fromFile, fromUrl, etc.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if a string is a valid file path.\r\n   * \r\n   * @param path - Path to check\r\n   * @returns Whether the path is valid\r\n   * @private\r\n   */\r\n  protected async _isValidFilePath(path: string): Promise<boolean> {\r\n    if (!this._isNode) {\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      const fs = await import('fs/promises');\r\n      const stats = await fs.stat(path);\r\n      return stats.isFile();\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if an object is a Buffer.\r\n   * \r\n   * @param obj - Object to check\r\n   * @returns Whether the object is a Buffer\r\n   * @private\r\n   */\r\n  protected _isBuffer(obj: any): boolean {\r\n    return this._isNode && Buffer.isBuffer(obj);\r\n  }\r\n\r\n  /**\r\n   * Decode base64 string in Node.js environment.\r\n   * \r\n   * @param base64 - Base64 string to decode\r\n   * @returns ArrayBuffer containing the decoded data\r\n   * @private\r\n   */\r\n  protected _decodeBase64NodeJs(base64: string): ArrayBuffer {\r\n    const buffer = Buffer.from(base64, 'base64');\r\n    return this._bufferToArrayBuffer(buffer);\r\n  }\r\n\r\n  /**\r\n   * Decode base64 string in browser environment.\r\n   * \r\n   * @param base64 - Base64 string to decode\r\n   * @returns ArrayBuffer containing the decoded data\r\n   * @private\r\n   */\r\n  protected _decodeBase64Browser(base64: string): ArrayBuffer {\r\n    const binaryString = atob(base64);\r\n    const bytes = new Uint8Array(binaryString.length);\r\n    \r\n    for (let i = 0; i < binaryString.length; i++) {\r\n      bytes[i] = binaryString.charCodeAt(i);\r\n    }\r\n    \r\n    return bytes.buffer;\r\n  }\r\n\r\n  /**\r\n   * Convert a Node.js Buffer to an ArrayBuffer.\r\n   * \r\n   * @param buffer - Buffer to convert\r\n   * @returns ArrayBuffer containing the data\r\n   * @private\r\n   */\r\n  private _bufferToArrayBuffer(buffer: Buffer): ArrayBuffer {\r\n    // Check if the underlying buffer is a SharedArrayBuffer\r\n    if (buffer.buffer instanceof SharedArrayBuffer) {\r\n      // Create a proper ArrayBuffer copy\r\n      const arrayBuffer = new ArrayBuffer(buffer.byteLength);\r\n      const view = new Uint8Array(arrayBuffer);\r\n      view.set(new Uint8Array(buffer));\r\n      return arrayBuffer;\r\n    } else {\r\n      // For regular ArrayBuffer, we can use slice\r\n      return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * ImageFile class extending MediaFile for image-specific functionality.\r\n * Example of inheritance capabilities.\r\n */\r\nexport class ImageFile extends MediaFile {\r\n  constructor(file_name: string = \"image\", content_type: string = \"image/jpeg\") {\r\n    super(file_name, content_type);\r\n  }\r\n\r\n  /**\r\n   * Check if the file is an image.\r\n   * \r\n   * @returns Boolean indicating if the file has an image MIME type\r\n   */\r\n  isImage(): boolean {\r\n    return this.content_type.startsWith('image/');\r\n  }\r\n\r\n  /**\r\n   * Get image dimensions (when implemented in a real-world scenario).\r\n   * This is just a placeholder showing inheritance capabilities.\r\n   */\r\n  async getDimensions(): Promise<{ width: number; height: number } | null> {\r\n    // This would be implemented with actual image dimension logic\r\n    // For browser: could create an Image element\r\n    // For Node.js: could use sharp or another image processing library\r\n    return null;\r\n  }\r\n}","// src/FastCloud.ts\r\nimport { MediaFile } from '../media-toolkit-js';\r\n\r\n/**\r\n * Configuration interface for FastCloud\r\n */\r\nexport interface FastCloudConfig {\r\n  uploadEndpoint: string;\r\n  apiKey: string;\r\n}\r\n\r\n/**\r\n * FastCloud class for handling file uploads\r\n * TypeScript equivalent of BaseUploadAPI and SocaityUploadAPI\r\n */\r\nexport class FastCloud {\r\n  private uploadEndpoint: string;\r\n  private apiKey: string;\r\n  private defaultTimeout: number = 60000; // 60 seconds timeout for uploads\r\n\r\n  /**\r\n   * Create a new FastCloud instance\r\n   * @param config FastCloud configuration\r\n   */\r\n  constructor(config: FastCloudConfig) {\r\n    this.uploadEndpoint = config.uploadEndpoint || 'https://api.socaity.ai/v0/files';\r\n    this.apiKey = config.apiKey;\r\n  }\r\n\r\n  /**\r\n   * Get authentication headers for requests\r\n   * @returns Headers object with authentication\r\n   */\r\n  private getAuthHeaders(): Record<string, string> {\r\n    return {\r\n      'Authorization': `Bearer ${this.apiKey}`,\r\n      'Content-Type': 'application/json'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Process the upload response to extract file URLs\r\n   * @param response Response from the upload endpoint\r\n   * @returns Array of temporary upload URLs\r\n   */\r\n  private async processUploadResponse(response: Response): Promise<string[]> {\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to get temporary upload URL: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    return Array.isArray(data) ? data : [data];\r\n  }\r\n\r\n  /**\r\n   * Upload a file to a temporary URL\r\n   * @param sasUrl Temporary URL for uploading\r\n   * @param file File to upload\r\n   */\r\n  private async uploadToTemporaryUrl(sasUrl: string, file: MediaFile): Promise<void> {\r\n    const headers = {\r\n      'x-ms-blob-type': 'BlockBlob',\r\n      'x-ms-if-none-match': '*'\r\n    };\r\n\r\n    const arrayBuffer = file instanceof MediaFile ? await file.toArrayBuffer() : file;\r\n    const response = await fetch(sasUrl, {\r\n      method: 'PUT',\r\n      headers,\r\n      body: arrayBuffer,\r\n    });\r\n\r\n    if (response.status !== 201) {\r\n      throw new Error(`Failed to upload to temporary URL ${sasUrl}. Response: ${response.statusText}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Upload a single file\r\n   * @param file File to upload\r\n   * @returns URL of the uploaded file\r\n   */\r\n  async upload(file: MediaFile | MediaFile[]): Promise<string | string[]> {\r\n    const files = Array.isArray(file) ? file : [file];\r\n    \r\n    // Get file extensions if available\r\n    const extensions = files.map(f => f.extension).filter(ext => ext !== null) as string[];\r\n    \r\n    // Request temporary upload URLs\r\n    const response = await fetch(this.uploadEndpoint, {\r\n      method: 'POST',\r\n      headers: this.getAuthHeaders(),\r\n      body: JSON.stringify({ \r\n        n_files: files.length, \r\n        file_extensions: extensions.length > 0 ? extensions : undefined \r\n      }),\r\n      signal: AbortSignal.timeout(this.defaultTimeout)\r\n    });\r\n    \r\n    // Process the response to get temporary URLs\r\n    const sasUrls = await this.processUploadResponse(response);\r\n    \r\n    // Upload files to temporary URLs\r\n    const uploadPromises = sasUrls.map((url, index) => \r\n      this.uploadToTemporaryUrl(url, files[index])\r\n    );\r\n    \r\n    // Wait for all uploads to complete\r\n    await Promise.all(uploadPromises);\r\n    \r\n    // Return URLs\r\n    return files.length === 1 ? sasUrls[0] : sasUrls;\r\n  }\r\n\r\n  /**\r\n   * Download a file from a URL\r\n   * @param url URL to download from\r\n   * @param savePath Optional path to save the file to\r\n   * @returns MediaFile object or save path if specified\r\n   */\r\n  async download(url: string, savePath?: string): Promise<MediaFile | string> {\r\n    const file = await new MediaFile(url).fromUrl(url, this.getAuthHeaders());\r\n    \r\n    if (!savePath) {\r\n      return file;\r\n    }\r\n    \r\n    await file.save(savePath);\r\n    return savePath;\r\n  }\r\n}","import { Configuration } from '../configuration';\r\nimport { ApiResponse, EndpointMetadata, RequestOptions } from '../../types';\r\nimport { MediaFile } from '../../media-toolkit-js';\r\nimport { FastCloud } from '../../fastCloud/FastCloud';\r\n\r\n/**\r\n * Handles HTTP requests to the Socaity API using native fetch\r\n */\r\nexport class RequestHandler {\r\n  private config: Configuration;\r\n  private uploadFileThresholdMB: number = 1;\r\n  private maxFileUploadLimitMB: number = 1000;\r\n  private fastCloud: FastCloud;\r\n  private abortController: AbortController;\r\n\r\n  constructor() {\r\n    this.config = Configuration.getInstance();\r\n    this.abortController = new AbortController();\r\n    \r\n    // Initialize FastCloud for file uploads\r\n    this.fastCloud = new FastCloud({\r\n      uploadEndpoint: `${this.config.baseUrl}/v0/files`,\r\n      apiKey: this.config.apiKey ? this.config.apiKey : ''\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Match request parameters against defined parameters\r\n   * @param definingParams Expected parameters\r\n   * @param params Actual parameters\r\n   */\r\n  matchParams(definingParams: Record<string, any>, params: Record<string, any>): Record<string, any> {\r\n    const matchedParams: Record<string, any> = {};\r\n    for (const [key, value] of Object.entries(definingParams)) {\r\n      if (key in params) {\r\n        matchedParams[key] = params[key];\r\n      } else if (value !== undefined) {\r\n        matchedParams[key] = value;\r\n      }\r\n    }\r\n    return matchedParams;\r\n  }\r\n\r\n  /**\r\n   * Parse query parameters for the request\r\n   * @param endpoint Endpoint metadata\r\n   * @param params Request parameters\r\n   */\r\n  parseQueryParams(endpoint: EndpointMetadata, params: Record<string, any>): Record<string, any> {\r\n    if (!endpoint.queryParams) { return {}; }\r\n    return this.matchParams(endpoint.queryParams, params);\r\n  }\r\n\r\n  /**\r\n   * Parse body parameters for the request\r\n   * @param endpoint Endpoint metadata\r\n   * @param params Request parameters\r\n   */\r\n  parseBodyParams(endpoint: EndpointMetadata, params: Record<string, any>): Record<string, any> {\r\n    if (!endpoint.bodyParams) { return {}; }\r\n    return this.matchParams(endpoint.bodyParams, params);\r\n  }\r\n\r\n\r\n  /**\r\n   * Parse file parameters for the request\r\n   * @param endpoint Endpoint metadata\r\n   * @param params Request parameters\r\n   * @returns Processed file parameters\r\n   */\r\n  async parseFileParams(endpoint: EndpointMetadata, params: Record<string, any>): Promise<Record<string, any>> {\r\n    if (!endpoint.fileParams) {\r\n      return {};\r\n    }\r\n    \r\n    // Match params against endpoint file parameters\r\n    const matchedParams = this.matchParams(endpoint.fileParams, params);\r\n    const result: Record<string, any> = {};\r\n    \r\n    try {\r\n      // Calculate total size of all files\r\n      let totalSizeMB = 0;\r\n      const mediaFiles: Record<string, MediaFile> = {};\r\n      \r\n      // Convert all to MediaFile objects except URLs\r\n      for (const [key, value] of Object.entries(matchedParams)) {\r\n        if (typeof value === 'string' && value.startsWith('http')) {\r\n          result[key] = value; // Keep URLs as they are\r\n        } else {\r\n          // Convert to MediaFile\r\n          let mediaFile = value;\r\n          try {\r\n            mediaFile = value instanceof MediaFile ? value : await MediaFile.create(value);\r\n          }\r\n          catch (error) {\r\n             console.log(`Failed to convert ${key} to MediaFile`, error);\r\n          }\r\n\r\n          if (!(mediaFile instanceof MediaFile)) {\r\n            continue;\r\n          }\r\n          \r\n          mediaFiles[key] = mediaFile;\r\n          totalSizeMB += mediaFile.fileSize('mb');\r\n        }\r\n      }\r\n      \r\n      // Check total size\r\n      if (totalSizeMB > this.maxFileUploadLimitMB) {\r\n        throw new Error(`Total file size exceeds maximum limit of ${this.maxFileUploadLimitMB}MB`);\r\n      }\r\n      \r\n      // Decide whether to upload or convert to base64\r\n      if (totalSizeMB > this.uploadFileThresholdMB) {\r\n        // Bulk upload if there are multiple files\r\n        if (Object.keys(mediaFiles).length > 1) {\r\n          const fileArray = Object.values(mediaFiles);\r\n          const urls = await this.fastCloud.upload(fileArray) as string[];\r\n          \r\n          // Map the URLs back to the keys\r\n          Object.keys(mediaFiles).forEach((key, index) => {\r\n            result[key] = urls[index];\r\n          });\r\n        } else {\r\n          // Upload files individually\r\n          for (const [key, mediaFile] of Object.entries(mediaFiles)) {\r\n            result[key] = await this.fastCloud.upload(mediaFile) as string;\r\n          }\r\n        }\r\n      } else {\r\n        // Convert all files to blob so that they can be sent as multipart form data\r\n        for (const [key, mediaFile] of Object.entries(mediaFiles)) {\r\n          result[key] = mediaFile.toBlob();\r\n        }\r\n      }\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      throw new Error(`File parameter processing failed: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validates that an API key is available\r\n   * @private\r\n   */\r\n  private validateAPIKey(apiKey?: string): string {\r\n    const key = apiKey || this.config.apiKey;\r\n    if (!key) {\r\n      throw new Error('API key not provided');\r\n    }\r\n    return key;\r\n  }\r\n\r\n  /**\r\n   * Build query string from parameters\r\n   * @private\r\n   */\r\n  private buildQueryString(params: Record<string, any>): string {\r\n    if (!params || Object.keys(params).length === 0) return '';\r\n    \r\n    const searchParams = new URLSearchParams();\r\n    for (const [key, value] of Object.entries(params)) {\r\n      if (value !== undefined && value !== null) {\r\n        if (typeof value === 'object') {\r\n          searchParams.append(key, JSON.stringify(value));\r\n        } else {\r\n          searchParams.append(key, String(value));\r\n        }\r\n      }\r\n    }\r\n    \r\n    const queryString = searchParams.toString();\r\n    return queryString ? `?${queryString}` : '';\r\n  }\r\n\r\n  /**\r\n   * Format error response from fetch\r\n   * @private\r\n   */\r\n  private async formatErrorResponse(response: Response): Promise<Error> {\r\n    const status = response.status;\r\n    let errorText;\r\n    \r\n    try {\r\n      const contentType = response.headers.get('content-type');\r\n      if (contentType && contentType.includes('application/json')) {\r\n        const errorJson = await response.json();\r\n        errorText = JSON.stringify(errorJson);\r\n      } else {\r\n        errorText = await response.text();\r\n      }\r\n    } catch (e) {\r\n      errorText = 'Could not parse error response';\r\n    }\r\n    \r\n    return new Error(`API error (${status}): ${errorText}`);\r\n  }\r\n\r\n  /**\r\n   * Send a request to the API\r\n   * @param path API endpoint path\r\n   * @param method HTTP method\r\n   * @param queryParams URL query parameters\r\n   * @param bodyParams Request body parameters\r\n   * @param apiKey API key for authentication\r\n   * @param fileParams Optional files to upload\r\n   */\r\n  async sendRequest(\r\n    path: string,\r\n    method: 'GET' | 'POST' = 'POST',\r\n    queryParams: Record<string, any> = {},\r\n    bodyParams: Record<string, any> = {},\r\n    fileParams: Record<string, any> = {},\r\n    apiKey?: string,\r\n  ): Promise<ApiResponse | string> {\r\n    // Validate API key\r\n    const key = this.validateAPIKey(apiKey);\r\n    \r\n    // Create a new AbortController for this request\r\n    this.abortController = new AbortController();\r\n    const { signal } = this.abortController;\r\n    \r\n    // Prepare request headers\r\n    const headers: Record<string, string> = {\r\n      'Authorization': `Bearer ${key}`\r\n    };\r\n\r\n    // Build URL with base and path\r\n    let url = `${this.config.baseUrl}/${path}`;\r\n    \r\n    let requestBody: any = null;\r\n    \r\n    // For GET requests, all parameters go in the query string\r\n    if (method === 'GET') {\r\n      const allParams = { ...queryParams, ...bodyParams, ...fileParams };\r\n      url += this.buildQueryString(allParams);\r\n    } \r\n    // For POST requests, query parameters go in URL, others in body\r\n    else {\r\n      // Check if we have file parameters\r\n      const hasFileParams = Object.keys(fileParams).length > 0;\r\n      \r\n      if (hasFileParams) {\r\n        // For Socaity API: When sending files, ALL other params should go in query string\r\n        url += this.buildQueryString({ ...queryParams, ...bodyParams });\r\n        \r\n        // Use FormData for requests with files - ONLY files go in the body\r\n        const formData = new FormData();\r\n        \r\n        // Add file parameters to FormData\r\n        Object.entries(fileParams).forEach(([key, value]) => {\r\n          if (value !== undefined && value !== null) {\r\n            console.log(`File param ${key} type:`, Object.prototype.toString.call(value));\r\n            formData.append(key, value);\r\n          }\r\n        });\r\n        \r\n        requestBody = formData;\r\n        // Don't set Content-Type header, let browser set it with the boundary\r\n      } else {\r\n        // For regular JSON requests without files\r\n        url += this.buildQueryString(queryParams);\r\n        headers['Content-Type'] = 'application/json';\r\n        requestBody = Object.keys(bodyParams).length > 0 ? JSON.stringify(bodyParams) : null;\r\n      }\r\n    }\r\n  \r\n    try {\r\n      //console.log(\"QueryParams\", queryParams);\r\n      //console.log(\"BodyParams\", requestBody);\r\n  \r\n      // Set request timeout (30 seconds)\r\n      const timeoutId = setTimeout(() => {\r\n        this.abort();\r\n      }, 30000);\r\n\r\n      // Make the fetch request\r\n      const response = await fetch(url, {\r\n        method,\r\n        headers,\r\n        body: requestBody,\r\n        signal,\r\n      });\r\n      \r\n      // Clear timeout as request completed\r\n      clearTimeout(timeoutId);\r\n\r\n      // Handle non-successful responses\r\n      if (!response.ok) {\r\n        throw await this.formatErrorResponse(response);\r\n      }\r\n      \r\n      // Parse response\r\n      const contentType = response.headers.get('content-type');\r\n      if (contentType && contentType.includes('application/json')) {\r\n        return await response.json();\r\n      }\r\n      \r\n      return await response.text();\r\n    } catch (error) {\r\n      if (error instanceof DOMException && error.name === 'AbortError') {\r\n        throw new Error('Request canceled');\r\n      }\r\n      \r\n      if (error instanceof Error) {\r\n        throw error;\r\n      }\r\n      \r\n      throw new Error(`Network error: ${String(error)}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Make a request to a specific endpoint\r\n   * @param endpoint Endpoint metadata\r\n   * @param params Request parameters\r\n   * @param apiKey API key\r\n   */\r\n  async request_endpoint(\r\n    endpoint: EndpointMetadata, \r\n    params: Record<string, any>, \r\n    apiKey?: string, \r\n  ): Promise<ApiResponse | string> {\r\n    const queryParams = this.parseQueryParams(endpoint, params);\r\n    const bodyParams = this.parseBodyParams(endpoint, params);\r\n    const fileParams = await this.parseFileParams(endpoint, params);\r\n\r\n    return this.sendRequest(\r\n      endpoint.path, \r\n      endpoint.method, \r\n      queryParams, \r\n      bodyParams, \r\n      fileParams,\r\n      apiKey\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Abort any ongoing requests\r\n   */\r\n  abort(): void {\r\n    this.abortController.abort();\r\n    this.abortController = new AbortController(); // Create a new controller for future requests\r\n  }\r\n}","/**\r\n * Represents the status of a job\r\n */\r\nexport enum JobStatus {\r\n  CREATED = 'CREATED',\r\n  QUEUED = 'QUEUED',\r\n  PROCESSING = 'PROCESSING',\r\n  COMPLETED = 'COMPLETED',\r\n  FAILED = 'FAILED'\r\n}\r\n\r\n/**\r\n * Represents the progress of a job\r\n */\r\nexport interface JobProgress {\r\n  progress: number;\r\n  message?: string;\r\n}\r\n\r\n/**\r\n * Represents a job in the Socaity system\r\n */\r\nexport interface SocaityJob {\r\n  id: string;\r\n  status: JobStatus;\r\n  progress?: JobProgress | null;\r\n  result?: any;\r\n  error?: string | null;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\n/**\r\n * Generic API response type\r\n */\r\nexport interface ApiResponse {\r\n  id?: string;\r\n  status?: string;\r\n  jobId?: string;\r\n  progress?: JobProgress | null;\r\n  result?: any;\r\n  error?: string;\r\n  [key: string]: any;\r\n}\r\n\r\n/**\r\n * Configuration options for the SDK\r\n */\r\nexport interface IConfig {\r\n  apiKey?: string;\r\n  baseUrl: string;\r\n  pollInterval: number;\r\n  maxRetries: number;\r\n}\r\n\r\n/**\r\n * HTTP request options\r\n */\r\nexport interface RequestOptions extends RequestInit {\r\n  headers: Record<string, string>;\r\n  body?: FormData | string;\r\n}\r\n\r\n/**\r\n * Chat options\r\n */\r\nexport interface ChatOptions {\r\n  apiKey?: string;\r\n  model?: string;\r\n  temperature?: number;\r\n}\r\n\r\n/**\r\n * File upload options\r\n */\r\nexport interface UploadOptions {\r\n  apiKey?: string;\r\n  fileType?: string;\r\n}\r\n\r\n/**\r\n * Callback function type for job events\r\n */\r\nexport type JobEventCallback<T> = (data: T) => void;\r\n\r\n/**\r\n * Endpoint metadata\r\n */\r\nexport interface EndpointMetadata {\r\n  path: string;\r\n  method: 'POST' | 'GET';\r\n  queryParams?: Record<string, any>;\r\n  bodyParams?: Record<string, any>;\r\n  fileParams?: Record<string, any>;\r\n}\r\n\r\n/**\r\n * Internal job tracking status\r\n */\r\nexport enum ProcessingPhase {\r\n  INITIALIZING = 'INITIALIZING',\r\n  PREPARING = 'PREPARING',\r\n  SENDING = 'SENDING',\r\n  TRACKING = 'TRACKING',\r\n  PROCESSING_RESULT = 'PROCESSING_RESULT',\r\n  COMPLETED = 'COMPLETED',\r\n  FAILED = 'FAILED'\r\n}\r\n\r\n/**\r\n * Represents the internal job tracking state\r\n */\r\nexport interface ProcessingState {\r\n  phase: ProcessingPhase;\r\n  progress: number;\r\n  message?: string;\r\n}\r\n","import { ApiResponse, JobStatus, SocaityJob, JobProgress } from '../../types';\r\nimport { MediaFile, isFileResult } from '../../media-toolkit-js'\r\n/**\r\n * Parses API responses into standardized formats\r\n */\r\nexport class ResponseParser {\r\n\r\n  /**\r\n   * Check if the response can be parsed by this parser\r\n   */\r\n  canParse(response: any): boolean {\r\n    if (!response) return false;\r\n    \r\n    // Check for standard Socaity API response format\r\n    if (response.id || response.jobId) {\r\n      return true;\r\n    }\r\n    \r\n    // Check for Runpod API response format\r\n    if (response.id && (response.status || response.state)) {\r\n      return true;\r\n    }\r\n    \r\n    // Check for Replicate API response format\r\n    if (response.id && response.status && response.urls) {\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n  \r\n  /**\r\n   * Parse response into standardized job format\r\n   */\r\n  async parse(response: ApiResponse): Promise<SocaityJob> {\r\n    const job: SocaityJob = {\r\n      id: response.id || response.jobId || '',\r\n      status: this.parseStatus(response),\r\n      progress: this.parseProgress(response),\r\n      result: this.parseResult(response.result),\r\n      error: response.error || null,\r\n      createdAt: new Date(),\r\n      updatedAt: new Date()\r\n    };\r\n    \r\n    return job;\r\n  }\r\n  \r\n  /**\r\n   * Parse status from different API formats\r\n   */\r\n  private parseStatus(response: ApiResponse): JobStatus {\r\n    // Handle standard format\r\n    const status = (response.status || '').toUpperCase();\r\n    \r\n    if (status === 'COMPLETED' || status === 'SUCCEEDED' || status === 'FINISHED') {\r\n      return JobStatus.COMPLETED;\r\n    } else if (status === 'FAILED' || status === 'ERROR') {\r\n      return JobStatus.FAILED;\r\n    } else if (status === 'IN_PROGRESS' || status === 'PROCESSING' || status === 'RUNNING' || \r\n               status === 'BOOTING') {\r\n      return JobStatus.PROCESSING;\r\n    } else if (status === 'QUEUED' || status === 'PENDING' || status === 'IN_QUEUE' || \r\n               status === 'STARTING') {\r\n      return JobStatus.QUEUED;\r\n    }\r\n    \r\n    // Handle Runpod format\r\n    if (response.state) {\r\n      const state = response.state.toUpperCase();\r\n      if (state === 'COMPLETED') return JobStatus.COMPLETED;\r\n      if (state === 'FAILED') return JobStatus.FAILED;\r\n      if (state === 'IN_PROGRESS') return JobStatus.PROCESSING;\r\n      if (state === 'IN_QUEUE') return JobStatus.QUEUED;\r\n      if (state === 'CANCELLED') return JobStatus.FAILED;\r\n      if (state === 'TIMED_OUT') return JobStatus.FAILED;\r\n    }\r\n    \r\n    return JobStatus.CREATED;\r\n  }\r\n  \r\n  /**\r\n   * Parse progress from different API formats\r\n   */\r\n  private parseProgress(response: ApiResponse): JobProgress | null {\r\n    // Extract progress data\r\n    let progressValue = response.progress || 0.0;\r\n    let progressMessage = response.message;\r\n\r\n    // Handle nested progress info\r\n    if (typeof progressValue === 'object' && progressValue !== null) {\r\n      progressMessage = progressValue.message || progressMessage;\r\n      progressValue = progressValue.progress || 0.0;\r\n    }\r\n\r\n    // Convert progress to float\r\n    try {\r\n      progressValue = typeof progressValue === 'number' ? progressValue : \r\n                    progressValue !== null ? parseFloat(String(progressValue)) : 0.0;\r\n    } catch (error) {\r\n      progressValue = 0.0;\r\n    }\r\n\r\n    // If status is COMPLETED, set progress to 100%\r\n    if (this.parseStatus(response) === JobStatus.COMPLETED) {\r\n      progressValue = 1.0;\r\n    }\r\n\r\n    return {\r\n      progress: progressValue,\r\n      message: progressMessage\r\n    };\r\n  }\r\n\r\n  private async parseResult(result?: any): Promise<Array<object> | any | null> {\r\n    if (result === undefined || result === null) {\r\n      return null\r\n    }\r\n\r\n    if (typeof result !== 'string' && Array.isArray(result)) {\r\n      let files = result.map((r: any) => this.parseResult(r));\r\n      return await Promise.all(files)\r\n    }\r\n    // file results or media to download\r\n    if (isFileResult(result)) {\r\n      try {\r\n        return await new MediaFile().fromDict(result);\r\n      }\r\n      catch (e) {\r\n        return result;\r\n      }\r\n    }\r\n    // Return the result as is for non-file results\r\n    return result;\r\n  }\r\n}","import { RequestHandler } from '../web/RequestHandler';\r\nimport { Configuration } from '../configuration';\r\nimport { SocaityJob, JobStatus, EndpointMetadata } from '../../types';\r\nimport { ResponseParser } from '../web/ResponseParser';\r\nimport { MediaFile } from '../../media-toolkit-js'\r\n\r\n/**\r\n * Manages asynchronous jobs for the Socaity API\r\n */\r\nexport class JobManager {\r\n  requestHandler: RequestHandler;\r\n  config: Configuration;\r\n  private jobs: Map<string, SocaityJob>;\r\n  responseParser: ResponseParser;\r\n  mediaHandler: MediaFile;\r\n  private static instance: JobManager;\r\n\r\n  /**\r\n   * Get the singleton instance of JobManager\r\n   * @param requestHandler - Optional RequestHandler to use when creating the instance\r\n   * @returns The JobManager instance\r\n   */\r\n  public static getInstance(requestHandler?: RequestHandler): JobManager {\r\n    if (!JobManager.instance) {\r\n      if (!requestHandler) {\r\n        // This assumes RequestHandler has a default constructor\r\n        requestHandler = new RequestHandler();\r\n      }\r\n      JobManager.instance = new JobManager(requestHandler);\r\n    }\r\n    return JobManager.instance;\r\n  }\r\n\r\n  /**\r\n   * Private constructor to enforce singleton pattern\r\n   * @param requestHandler - RequestHandler for API communication\r\n   */\r\n  private constructor(requestHandler: RequestHandler) {\r\n    this.requestHandler = requestHandler;\r\n    this.config = Configuration.getInstance();\r\n    this.jobs = new Map();\r\n    this.responseParser = new ResponseParser();\r\n    this.mediaHandler = new MediaFile();\r\n  }\r\n\r\n\r\n  /**\r\n   * Submit a new job to the API\r\n   * @param endpoint - API endpoint to call\r\n   * @param params - Parameters for the job\r\n   * @param apiKey - Optional API key to use for this request\r\n   * @param file - Optional file to include\r\n   * @returns Promise resolving to the created job\r\n   */\r\n  async submitJob<T>(\r\n    endpoint: EndpointMetadata, \r\n    params: Record<string, any>, \r\n    apiKey?: string\r\n  ): Promise<SocaityJob> {\r\n    try {\r\n      const response = await this.requestHandler.request_endpoint(endpoint, params, apiKey);\r\n      \r\n      // Parse initial response to get job information\r\n      if (!this.responseParser.canParse(response)) {\r\n        throw new Error('Unexpected response format from API');\r\n      }\r\n      \r\n      const job = await this.responseParser.parse(response);\r\n      \r\n      // Store the job\r\n      this.jobs.set(job.id, job);\r\n      \r\n      return job;\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        throw error;\r\n      }\r\n      throw new Error(`Failed to submit job: ${String(error)}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all tracked jobs\r\n   */\r\n  getAllJobs(): SocaityJob[] {\r\n    return Array.from(this.jobs.values());\r\n  }\r\n\r\n  /**\r\n   * Get a specific job by ID\r\n   * @param jobId - ID of the job to retrieve\r\n   */\r\n  getJob(jobId: string): SocaityJob | undefined {\r\n    return this.jobs.get(jobId);\r\n  }\r\n\r\n  /**\r\n   * Track a job until it completes\r\n   * @param job - The job to track\r\n   * @returns Promise resolving to the final result of the job\r\n   */\r\n  async trackJobToCompletion(job: SocaityJob): Promise<any> {\r\n    let retries = 0;\r\n    \r\n    while (retries < this.config.maxRetries) {\r\n      try {\r\n        const updatedJob = await this.requestHandler.sendRequest('status', 'POST', { job_id: job.id });\r\n        const parsedJob = await this.responseParser.parse(updatedJob);\r\n        \r\n        // Update our stored job\r\n        this.jobs.set(job.id, parsedJob);\r\n\r\n        if (parsedJob.status === JobStatus.COMPLETED) {\r\n          return parsedJob.result;\r\n          //return this.mediaHandler.processResponse(parsedJob.result);\r\n        }\r\n        \r\n        if (parsedJob.status === JobStatus.FAILED) {\r\n          throw new Error(`Job failed: ${parsedJob.error}`);\r\n        }\r\n        \r\n        // Wait before polling again\r\n        await new Promise(resolve => setTimeout(resolve, this.config.pollInterval));\r\n      } catch (error) {\r\n        retries++;\r\n        if (retries >= this.config.maxRetries) {\r\n          throw error;\r\n        }\r\n        // Exponential backoff for retries\r\n        await new Promise(resolve => setTimeout(resolve, this.config.pollInterval * retries));\r\n      }\r\n    }\r\n    \r\n    throw new Error('Max retries exceeded while tracking job');\r\n  }\r\n\r\n  /**\r\n   * Cancel a running job\r\n   * @param jobId - ID of the job to cancel\r\n   * @returns Promise resolving to true if the job was cancelled\r\n   */\r\n  async cancelJob(jobId: string): Promise<boolean> {\r\n    try {\r\n      await this.requestHandler.sendRequest('cancel', \"GET\", { job_id: jobId });\r\n      this.jobs.delete(jobId);\r\n      return true;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear completed or failed jobs from tracking\r\n   */\r\n  clearCompletedJobs(): void {\r\n    for (const [jobId, job] of this.jobs.entries()) {\r\n      if (job.status === JobStatus.COMPLETED || job.status === JobStatus.FAILED) {\r\n        this.jobs.delete(jobId);\r\n      }\r\n    }\r\n  }\r\n}","// Check if we're in a Node.js environment\r\nexport const isNode = typeof process !== 'undefined' && process.stdout && process.stdout.clearLine;\r\n\r\n// Import cli-progress only in Node environment\r\nexport let cliProgress: any;\r\nif (isNode) {\r\n  try {\r\n    cliProgress = require('cli-progress');\r\n  } catch (e) {\r\n    console.warn('cli-progress package not found. Using basic console output for progress.');\r\n  }\r\n}\r\n\r\n// Singleton to manage multiple progress bars\r\nexport class ProgressBarManager {\r\n  private static instance: ProgressBarManager;\r\n  private multiBar: any;\r\n  private bars: Map<string, any> = new Map();\r\n  private isInitialized = false;\r\n\r\n  private constructor() {\r\n    if (isNode && cliProgress) {\r\n      this.multiBar = new cliProgress.MultiBar({\r\n        clearOnComplete: false,\r\n        hideCursor: true,\r\n        format: '{bar} {percentage}% | {jobId} | {phase} | {message}',\r\n      });\r\n      this.isInitialized = true;\r\n    }\r\n  }\r\n\r\n  public static getInstance(): ProgressBarManager {\r\n    if (!ProgressBarManager.instance) {\r\n      ProgressBarManager.instance = new ProgressBarManager();\r\n    }\r\n    return ProgressBarManager.instance;\r\n  }\r\n\r\n  public createBar(jobId: string, phase: string): any {\r\n    if (!this.isInitialized) return null;\r\n    \r\n    const bar = this.multiBar.create(100, 0, {\r\n      jobId,\r\n      phase,\r\n      message: 'Starting...',\r\n    });\r\n    this.bars.set(jobId, bar);\r\n    return bar;\r\n  }\r\n\r\n  public updateBar(jobId: string, percent: number, payload: object): void {\r\n    const bar = this.bars.get(jobId);\r\n    if (bar) {\r\n      bar.update(percent, payload);\r\n    }\r\n  }\r\n\r\n  public removeBar(jobId: string): void {\r\n    const bar = this.bars.get(jobId);\r\n    if (bar) {\r\n      bar.stop();\r\n      this.multiBar.remove(bar);\r\n      this.bars.delete(jobId);\r\n    }\r\n  }\r\n\r\n  public stopAll(): void {\r\n    if (this.isInitialized) {\r\n      this.multiBar.stop();\r\n      this.bars.clear();\r\n    }\r\n  }\r\n}\r\n","import { SocaityJob, JobStatus, ProcessingState, ProcessingPhase, JobEventCallback, JobProgress, EndpointMetadata } from '../../types';\r\nimport { JobManager } from './JobManager';\r\nimport { ProgressBarManager, isNode, cliProgress } from './ProgressBarManager';\r\n\r\ntype EventType = 'completed' | 'failed' | 'progressUpdated' | 'statusUpdated' | 'processingUpdated';\r\ntype EventListener = (...args: any[]) => void;\r\n// Update callback type to allow transforming the result\r\nexport type ParseResultCallback<T> = (result: T) => T | void | Promise<T> | Promise<void>;\r\n\r\n/**\r\n * Represents a tracked job that handles both internal processing and API job status\r\n */\r\nexport class TrackedJob<T = any> implements PromiseLike<T> {\r\n  private apiJob: SocaityJob;\r\n  private endpoint: EndpointMetadata\r\n  private processingState: ProcessingState;\r\n  private jobManager: JobManager;\r\n  private result: T | null = null;\r\n  private error: Error | null = null;\r\n  private completed = false;\r\n  private resolvePromise!: (value: T | PromiseLike<T>) => void;\r\n  private rejectPromise!: (reason?: any) => void;\r\n  private promise: Promise<T>;\r\n  private eventListeners: Map<EventType, EventListener[]> = new Map();\r\n  private verbose: boolean;\r\n  private progressBar: any = null;\r\n  private progressBarManager: ProgressBarManager;\r\n  private parseResultCallbacks: ParseResultCallback<T>[] = [];\r\n  \r\n  constructor(apiJob: SocaityJob, jobManager: JobManager, endpoint: EndpointMetadata, onParseResult?: ParseResultCallback<T>, verbose = true) {\r\n    this.apiJob = apiJob;\r\n    this.jobManager = jobManager;\r\n    this.endpoint = endpoint;\r\n    this.verbose = verbose;\r\n    this.processingState = {\r\n      phase: ProcessingPhase.INITIALIZING,\r\n      progress: 0\r\n    };\r\n    this.progressBarManager = ProgressBarManager.getInstance();\r\n    \r\n    // Create promise for then/catch handling\r\n    this.promise = new Promise<T>((resolve, reject) => {\r\n      this.resolvePromise = resolve;\r\n      this.rejectPromise = reject;\r\n    });\r\n    \r\n    // Register custom parse result callback if provided\r\n    if (onParseResult) {\r\n      this.onParseResult(onParseResult);\r\n    }\r\n\r\n    // Start tracking immediately\r\n    setTimeout(() => this.startTracking(), 0);\r\n    \r\n    // Initialize progress display if verbose\r\n    if (this.verbose) {\r\n      this.initProgressDisplay();\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Initialize the progress display\r\n   */\r\n  private initProgressDisplay(): void {\r\n    if (!this.verbose) return;\r\n    \r\n    if (isNode && cliProgress) {\r\n      // Create a progress bar for this job\r\n      this.progressBar = this.progressBarManager.createBar(\r\n        this.apiJob.id || 'initializing',\r\n        this.processingState.phase,\r\n      );\r\n      this.updateProgressDisplay();\r\n    } else {\r\n      // Browser or environment without cli-progress\r\n      this.logProgress();\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Update the progress display based on current state\r\n   */\r\n  private updateProgressDisplay(): void {\r\n    if (!this.verbose) return;\r\n    \r\n    const phase = this.processingState.phase;\r\n    const progressPercent = this.calculateProgressPercent();\r\n    const message = this.formatProgressMessage();\r\n    \r\n    if (isNode && cliProgress && this.progressBar) {\r\n      // Update the cli-progress bar\r\n      this.progressBarManager.updateBar(this.apiJob.id, progressPercent, {\r\n        phase,\r\n        message: message.replace(/^.*\\| /, ''), // Remove the progress percentage part\r\n      });\r\n    } else {\r\n      // Browser or environment without cli-progress\r\n      this.logProgress();\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Calculate progress percentage based on current state\r\n   */\r\n  private calculateProgressPercent(): number {\r\n    const phase = this.processingState.phase;\r\n    \r\n    // For phases with known progress\r\n    if (phase === ProcessingPhase.TRACKING && this.apiJob.progress?.progress) {\r\n      return Math.round(this.apiJob.progress.progress * 100);\r\n    }\r\n    \r\n    // For phases with fixed progress values\r\n    switch (phase) {\r\n      case ProcessingPhase.INITIALIZING: return 0;\r\n      case ProcessingPhase.PREPARING: return 5;\r\n      case ProcessingPhase.SENDING: return 10;\r\n      case ProcessingPhase.TRACKING: return 15;\r\n      case ProcessingPhase.PROCESSING_RESULT: return 90;\r\n      case ProcessingPhase.COMPLETED: return 100;\r\n      case ProcessingPhase.FAILED: return 100;\r\n      default: return 0;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Format a human-readable progress message\r\n   */\r\n  private formatProgressMessage(): string {\r\n    const phase = this.processingState.phase;\r\n    const jobId = this.apiJob.id || 'initializing';\r\n    \r\n    if (phase === ProcessingPhase.INITIALIZING || \r\n        phase === ProcessingPhase.PREPARING || \r\n        phase === ProcessingPhase.SENDING) {\r\n      return `${phase} job | API: ${this.endpoint.path}`;\r\n    } else if (phase === ProcessingPhase.TRACKING) {\r\n      const progressPercent = this.apiJob.progress ? \r\n        `${Math.round(this.apiJob.progress.progress * 100)}%` : \r\n        'unknown';\r\n      \r\n      let message = `Job ${jobId} | Progress: ${progressPercent} | API: ${this.endpoint.path}`;\r\n      if (this.apiJob.progress?.message) {\r\n        message += ` | ${this.apiJob.progress.message}`;\r\n      }\r\n      return message;\r\n    } else {\r\n      return `Job ${jobId} | ${phase} | API: ${this.endpoint.path}`;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Log progress to console (for browser environments)\r\n   */\r\n  private logProgress(): void {\r\n    // Only log on state changes to avoid console spam\r\n    const message = this.formatProgressMessage();\r\n    \r\n    // Store last message to avoid duplicates\r\n    if (!this._lastLoggedMessage || this._lastLoggedMessage !== message) {\r\n      console.log(message);\r\n      this._lastLoggedMessage = message;\r\n    }\r\n  }\r\n  \r\n  // Keep track of the last logged message to avoid duplicates\r\n  private _lastLoggedMessage: string | null = null;\r\n  \r\n  /**\r\n   * Stop the progress display\r\n   */\r\n  private stopProgressDisplay(): void {\r\n    if (!this.verbose) return;\r\n    \r\n    if (isNode && cliProgress && this.progressBar) {\r\n      this.progressBarManager.removeBar(this.apiJob.id);\r\n      this.progressBar = null;\r\n    }\r\n    \r\n    const phase = this.processingState.phase;\r\n    \r\n    // Show final message\r\n    if (phase === ProcessingPhase.COMPLETED) {\r\n      console.log(`✓ Job ${this.apiJob.id} completed successfully (${this.endpoint.path})`);\r\n    } else if (phase === ProcessingPhase.FAILED) {\r\n      console.log(`✗ Job ${this.apiJob.id} failed: ${this.processingState.message} (${this.endpoint.path})`);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Add an event listener\r\n   */\r\n  private on(eventName: EventType, callback: EventListener): this {\r\n    if (!this.eventListeners.has(eventName)) {\r\n      this.eventListeners.set(eventName, []);\r\n    }\r\n    this.eventListeners.get(eventName)!.push(callback);\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * Emit an event\r\n   */\r\n  private emit(eventName: EventType, ...args: any[]): void {\r\n    const listeners = this.eventListeners.get(eventName);\r\n    if (listeners) {\r\n      listeners.forEach(listener => listener(...args));\r\n    }\r\n  }\r\n  \r\n\r\n  /**\r\n   * Poll for job status updates\r\n   */\r\n  private async pollJobStatus(): Promise<void> {\r\n    // Stop polling if job is completed or failed\r\n    if (this.completed || !this.apiJob.id) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Get the latest job state\r\n      const updatedJob = await this.jobManager.requestHandler.sendRequest('status', 'POST', { job_id: this.apiJob.id });\r\n      if (!updatedJob) {\r\n        // Schedule next poll\r\n        setTimeout(() => this.pollJobStatus(), this.jobManager.config.pollInterval);\r\n        return;\r\n      }\r\n      \r\n      // Update our copy of the job\r\n      const parsedJob = await this.jobManager.responseParser.parse(updatedJob);\r\n      this.apiJob = parsedJob;\r\n      \r\n      // Update internal state based on API job status\r\n      this.emitJobUpdate();\r\n      \r\n      // Update progress display\r\n      if (this.verbose) {\r\n        this.updateProgressDisplay();\r\n      }\r\n      \r\n      if (parsedJob.status === JobStatus.COMPLETED) {\r\n        this.updateProcessingState(ProcessingPhase.PROCESSING_RESULT, 0.9, 'Processing result');\r\n        try {\r\n          // Process the result\r\n          this.result = await parsedJob.result;\r\n          this.result = await this.runParseResultCallbacks(this.result);\r\n          this.complete();\r\n        } catch (error) {\r\n          this.fail(error instanceof Error ? error : new Error(String(error)));\r\n        }\r\n      } else if (parsedJob.status === JobStatus.FAILED) {\r\n        this.updateProcessingState(ProcessingPhase.FAILED, 1, parsedJob.error || 'Job failed');\r\n        this.fail(new Error(parsedJob.error || 'Job failed with no error message'));\r\n      } else {\r\n        // Schedule next poll only if job is still in progress\r\n        setTimeout(() => this.pollJobStatus(), this.jobManager.config.pollInterval);\r\n      }\r\n    } catch (error) {\r\n      // Don't fail the job immediately on polling errors\r\n      console.error('Error polling job status:', error);\r\n      \r\n      // Keep polling even after an error\r\n      setTimeout(() => this.pollJobStatus(), this.jobManager.config.pollInterval);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start tracking the job\r\n   */\r\n  private startTracking(): void {\r\n    this.updateProcessingState(ProcessingPhase.TRACKING, 0, 'Tracking job status');\r\n    \r\n    // Start the polling cycle immediately\r\n    this.pollJobStatus();\r\n  }\r\n  \r\n  /**\r\n   * Mark the job as completed\r\n   */\r\n  private complete(): void {\r\n    this.updateProcessingState(ProcessingPhase.COMPLETED, 1, 'Job completed');\r\n    this.cleanup();\r\n    this.completed = true;\r\n    this.emit('completed', this.result);\r\n    this.resolvePromise(this.result!);\r\n  }\r\n  \r\n  /**\r\n   * Mark the job as failed\r\n   */\r\n  private fail(error: Error): void {\r\n    this.updateProcessingState(ProcessingPhase.FAILED, 1, error.message);\r\n    this.cleanup();\r\n    this.completed = true;\r\n    this.error = error;\r\n    this.emit('failed', error);\r\n    this.rejectPromise(error);\r\n  }\r\n  \r\n  /**\r\n   * Clean up resources\r\n   */\r\n  private cleanup(): void {\r\n    this.stopProgressDisplay();\r\n  }\r\n  \r\n  /**\r\n   * Update the internal processing state\r\n   */\r\n  private updateProcessingState(phase: ProcessingPhase, progress: number, message?: string): void {\r\n    this.processingState = {\r\n      phase,\r\n      progress,\r\n      message\r\n    };\r\n    \r\n    // Update display if verbose\r\n    if (this.verbose) {\r\n      this.updateProgressDisplay();\r\n    }\r\n    \r\n    this.emit('processingUpdated', this.processingState);\r\n  }\r\n  \r\n  /**\r\n   * Emit job update event\r\n   */\r\n  private emitJobUpdate(): void {\r\n    this.emit('progressUpdated', this.apiJob.progress);\r\n    this.emit('statusUpdated', this.apiJob.status);\r\n  }\r\n  \r\n  /**\r\n   * Set verbosity of progress display\r\n   * @param verbose Whether to display progress information\r\n   */\r\n  setVerbose(verbose: boolean): this {\r\n    this.verbose = verbose;\r\n    \r\n    if (verbose && !this.progressBar && !this.completed) {\r\n      this.initProgressDisplay();\r\n    } else if (!verbose && this.progressBar) {\r\n      this.stopProgressDisplay();\r\n    }\r\n    \r\n    return this;\r\n  }\r\n  /**\r\n   * Register a callback for job completion\r\n   */\r\n  onCompleted(callback: JobEventCallback<T>): this {\r\n    this.on('completed', callback);\r\n    // If already completed, call the callback immediately\r\n    if (this.completed && this.result !== null) {\r\n      setTimeout(() => callback(this.result!), 0);\r\n    }\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * Register a callback for job failure\r\n   */\r\n  onFailed(callback: JobEventCallback<Error|null>): this {\r\n    this.on('failed', callback);\r\n    // If already failed, call the callback immediately\r\n    if (this.completed && this.error !== null) {\r\n      setTimeout(() => callback(this.error), 0);\r\n    }\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * Register a callback for job progress updates\r\n   */\r\n  onProgress(callback: JobEventCallback<JobProgress | null | undefined>): this {\r\n    this.on('progressUpdated', callback);\r\n    // Call immediately with current progress\r\n    setTimeout(() => callback(this.apiJob.progress), 0);\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * Register a callback for job status updates\r\n   */\r\n  onStatus(callback: JobEventCallback<JobStatus>): this {\r\n    this.on('statusUpdated', callback);\r\n    // Call immediately with current status\r\n    setTimeout(() => callback(this.apiJob.status), 0);\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * Register a callback for internal processing state updates\r\n   */\r\n  onProcessingUpdated(callback: JobEventCallback<ProcessingState>): this {\r\n    this.on('processingUpdated', callback);\r\n    // Call immediately with current processing state\r\n    setTimeout(() => callback(this.processingState), 0);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Register a callback for custom post-processing of the job result\r\n   */\r\n  onParseResult(callback: ParseResultCallback<T>): this {\r\n    this.parseResultCallbacks.push(callback);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Run all registered parse result callbacks\r\n   */\r\n  private async runParseResultCallbacks(result: T | any): Promise<T> {\r\n    let currentResult = result;\r\n    \r\n    for (const callback of this.parseResultCallbacks) {\r\n      const callbackResult = await callback(currentResult);\r\n      // If callback returns a value (not undefined), use it as the new result\r\n      if (callbackResult !== undefined) {\r\n        currentResult = callbackResult as T;\r\n      }\r\n    }\r\n    \r\n    return currentResult;\r\n  }\r\n  \r\n  /**\r\n   * Cancel the job\r\n   */\r\n  async cancel(): Promise<boolean> {\r\n    try {\r\n      const success = await this.jobManager.cancelJob(this.apiJob.id);\r\n      if (success) {\r\n        this.cleanup();\r\n        this.fail(new Error('Job cancelled by user'));\r\n      }\r\n      return success;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get the current job ID\r\n   */\r\n  get id(): string {\r\n    return this.apiJob.id;\r\n  }\r\n  \r\n  /**\r\n   * Get the current job status\r\n   */\r\n  get status(): JobStatus {\r\n    return this.apiJob.status;\r\n  }\r\n  \r\n  /**\r\n   * Get the current job progress\r\n   */\r\n  get progress(): JobProgress | null {\r\n    return this.apiJob.progress || null;\r\n  }\r\n  \r\n  /**\r\n   * Get the current processing phase\r\n   */\r\n  get phase(): ProcessingPhase {\r\n    return this.processingState.phase;\r\n  }\r\n  \r\n  /**\r\n   * Implementation of the PromiseLike interface\r\n   */\r\n  then<TResult1 = T, TResult2 = never>(\r\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\r\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null\r\n  ): Promise<TResult1 | TResult2> {\r\n    return this.promise.then(onfulfilled, onrejected);\r\n  }\r\n}","import { IAPIClient } from \"./APIClient\";\r\n\r\n/**\r\n * Registry for all available APIClients\r\n */\r\nexport class APIClientFactory {\r\n    private static instance: APIClientFactory;\r\n    private registeredClients: Map<string, IAPIClient> = new Map();\r\n    private clientConstructors: Map<string, new () => IAPIClient> = new Map();\r\n    \r\n    private constructor() {}\r\n    \r\n    static getInstance(): APIClientFactory {\r\n      if (!APIClientFactory.instance) {\r\n        APIClientFactory.instance = new APIClientFactory();\r\n      }\r\n      return APIClientFactory.instance;\r\n    }\r\n  \r\n    static registerClientType<T extends IAPIClient>(\r\n      name: string, \r\n      constructor: new () => T\r\n    ): void {\r\n      const factory = APIClientFactory.getInstance();\r\n      const normalizedName = APIClientFactory.normalizeClientName(name);\r\n      factory.clientConstructors.set(normalizedName, constructor as new () => IAPIClient);\r\n    }\r\n    \r\n    static registerClient(client: IAPIClient): void {\r\n      const factory = APIClientFactory.getInstance();\r\n      const normalizedName = APIClientFactory.normalizeClientName(client.name);\r\n      factory.registeredClients.set(normalizedName, client);\r\n    }\r\n    \r\n    static getClient<T extends IAPIClient>(name: string): T {\r\n      const factory = APIClientFactory.getInstance();\r\n      const normalizedName = APIClientFactory.normalizeClientName(name);\r\n      \r\n      // Return existing instance if available\r\n      let client = factory.registeredClients.get(normalizedName);\r\n      \r\n      if (!client) {\r\n        // Create new instance if constructor is registered\r\n        const constructor = factory.clientConstructors.get(normalizedName);\r\n        if (!constructor) {\r\n          throw new Error(\r\n            `Client \"${name}\" not found. Available clients: ${Array.from(factory.clientConstructors.keys()).join(\", \")}`\r\n          );\r\n        }\r\n        \r\n        client = new constructor();\r\n        factory.registeredClients.set(normalizedName, client);\r\n      }\r\n      \r\n      return client as T;\r\n    }\r\n    \r\n    static getAvailableClients(): string[] {\r\n      const factory = APIClientFactory.getInstance();\r\n      return Array.from(factory.clientConstructors.keys());\r\n    }\r\n    \r\n    private static normalizeClientName(name: string): string {\r\n      return name.toLowerCase().replace(/[^a-z0-9-]/g, \"\");\r\n    }\r\n  }","import { RequestHandler } from './RequestHandler';\r\nimport { Configuration } from '../configuration';\r\nimport { EndpointMetadata, SocaityJob } from '../../types';\r\nimport { JobManager } from '../job/JobManager';\r\nimport { TrackedJob, ParseResultCallback } from '../job/TrackedJob';\r\nimport { APIClientFactory } from './APIClientFactory';\r\n\r\n/**\r\n * Base API client for all Socaity services\r\n */\r\nexport interface IAPIClient {\r\n  readonly name: string;\r\n  updateConfig(config: Partial<Configuration>): void;\r\n  getJobs(): SocaityJob[];\r\n  getJob(jobId: string): SocaityJob | undefined;\r\n  cancelJob(jobId: string): Promise<boolean>;\r\n}\r\n\r\n\r\n\r\nexport abstract class ApiClient implements IAPIClient {\r\n  protected requestHandler: RequestHandler;\r\n  protected config: Configuration;\r\n  protected endpoints: Map<string, EndpointMetadata>;\r\n  protected jobManager: JobManager;\r\n  // Name of the API client. Has influence on path variable in the requests which will be formatted like /api/v1/{name}/{endpoint}\r\n  public name: string; \r\n\r\n  constructor(name: string) {\r\n    this.name = this.sanitizePath(name);\r\n    this.config = Configuration.getInstance();\r\n    this.requestHandler = new RequestHandler();\r\n    this.endpoints = new Map();\r\n    this.jobManager = JobManager.getInstance(this.requestHandler);\r\n    this.registerEndpoints();\r\n    APIClientFactory.registerClient(this);\r\n  }\r\n  \r\n  protected sanitizePath(path: string): string {\r\n    if (!path || typeof path !== 'string') {\r\n      return '';\r\n    }\r\n    return path.toLowerCase()\r\n    .trim().replace(/\\s+/g, ' ') // Replace multiple spaces with single space\r\n    .replace(/\\//g, '-')           // Replace backslashes with forward slashes\r\n    .replace(/[\\s_]/g, '-')      // Replace spaces and underscores with hyphens\r\n    .replace(/[^a-z0-9\\-]/g, '') // Keep only alphanumeric and hyphens\r\n    .replace(/\\-+/g, '-')       // Replace multiple hyphens with single hyphen\r\n    .replace(/^\\-+|\\-+$/g, '')         // Remove leading/trailing hyphens\r\n    .trim()\r\n  }\r\n\r\n  /**\r\n   * Register available endpoints for this API client\r\n   * This method should be overridden by subclasses\r\n   */\r\n  protected abstract registerEndpoints(): void;\r\n\r\n  /**\r\n   * Register a new endpoint with the client\r\n   */\r\n  protected registerEndpoint(endpoint: EndpointMetadata): void {\r\n    const sanitzized_path = this.sanitizePath(endpoint.path);\r\n    endpoint.path = this.name + '/' + sanitzized_path;\r\n    this.endpoints.set(sanitzized_path, endpoint);\r\n  }\r\n  \r\n  /**\r\n   * Get an endpoint by name\r\n   */\r\n  protected getEndpoint(name: string): EndpointMetadata {\r\n    name = this.sanitizePath(name);\r\n    const endpoint = this.endpoints.get(name);\r\n    if (!endpoint) {\r\n      throw new Error(`Unknown endpoint: ${name}`);\r\n    }\r\n    return endpoint;\r\n  }\r\n  \r\n  /**\r\n   * Update the client configuration\r\n   */\r\n  updateConfig(config: Partial<Configuration>): void {\r\n    Configuration.update(config);\r\n  }\r\n\r\n  /**\r\n   * Submit a job to the API and return a TrackedJob for monitoring\r\n   * @param endpoint - API endpoint path\r\n   * @param params - Request parameters\r\n   * @param apiKey - Optional API key to override the default\r\n   * @param file - Optional file to upload\r\n   * @returns A TrackedJob for monitoring the job\r\n   */\r\n  protected async submitTrackedJob<T>(\r\n    endpoint: EndpointMetadata,\r\n    params: Record<string, any>,\r\n    onParseResult?: ParseResultCallback<T> ,\r\n    apiKey?: string,\r\n    verbose: boolean = true\r\n\r\n  ): Promise<TrackedJob<T>> {\r\n    const job = await this.jobManager.submitJob(endpoint, params, apiKey);\r\n    return new TrackedJob(job, this.jobManager, endpoint, onParseResult, verbose);\r\n  }\r\n\r\n  /**\r\n   * Get all active jobs for this client\r\n   */\r\n  getJobs(): SocaityJob[] {\r\n    return this.jobManager.getAllJobs();\r\n  }\r\n\r\n  /**\r\n   * Get a specific job by ID\r\n   */\r\n  getJob(jobId: string): SocaityJob | undefined {\r\n    return this.jobManager.getJob(jobId);\r\n  }\r\n\r\n  /**\r\n   * Cancel a running job\r\n   */\r\n  async cancelJob(jobId: string): Promise<boolean> {\r\n    return this.jobManager.cancelJob(jobId);\r\n  }\r\n}","var util;\n(function (util) {\n    util.assertEqual = (val) => val;\n    function assertIs(_arg) { }\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items) => {\n        const obj = {};\n        for (const item of items) {\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj) => {\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys) {\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj) => {\n        return util.objectKeys(obj).map(function (e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\n        : (object) => {\n            const keys = [];\n            for (const key in object) {\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n    util.find = (arr, checker) => {\n        for (const item of arr) {\n            if (checker(item))\n                return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\"\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\n        : (val) => typeof val === \"number\" && isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array\n            .map((val) => (typeof val === \"string\" ? `'${val}'` : val))\n            .join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value) => {\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nvar objectUtil;\n(function (objectUtil) {\n    objectUtil.mergeShapes = (first, second) => {\n        return {\n            ...first,\n            ...second, // second overwrites first\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nconst ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\",\n]);\nconst getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then &&\n                typeof data.then === \"function\" &&\n                data.catch &&\n                typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\n\nconst ZodIssueCode = util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\",\n]);\nconst quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n    get errors() {\n        return this.issues;\n    }\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    static assert(value) {\n        if (!(value instanceof ZodError)) {\n            throw new Error(`Not a ZodError: ${value}`);\n        }\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n                fieldErrors[sub.path[0]].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case ZodIssueCode.invalid_type:\n            if (issue.received === ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n            break;\n        case ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n            break;\n        case ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n            break;\n        case ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                }\n                else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n                message = `BigInt must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `smaller than or equal to`\n                        : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            util.assertNever(issue);\n    }\n    return { message };\n};\n\nlet overrideErrorMap = errorMap;\nfunction setErrorMap(map) {\n    overrideErrorMap = map;\n}\nfunction getErrorMap() {\n    return overrideErrorMap;\n}\n\nconst makeIssue = (params) => {\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [...path, ...(issueData.path || [])];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath,\n    };\n    if (issueData.message !== undefined) {\n        return {\n            ...issueData,\n            path: fullPath,\n            message: issueData.message,\n        };\n    }\n    let errorMessage = \"\";\n    const maps = errorMaps\n        .filter((m) => !!m)\n        .slice()\n        .reverse();\n    for (const map of maps) {\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: errorMessage,\n    };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n    const overrideMap = getErrorMap();\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap, // contextual error map is first priority\n            ctx.schemaErrorMap, // then schema-bound map if available\n            overrideMap, // then global override map\n            overrideMap === errorMap ? undefined : errorMap, // then global default map\n        ].filter((x) => !!x),\n    });\n    ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n    constructor() {\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\")\n            this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results) {\n            if (s.status === \"aborted\")\n                return INVALID;\n            if (s.status === \"dirty\")\n                status.dirty();\n            arrayValue.push(s.value);\n        }\n        return { status: status.value, value: arrayValue };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs) {\n            const key = await pair.key;\n            const value = await pair.value;\n            syncPairs.push({\n                key,\n                value,\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs) {\n            const { key, value } = pair;\n            if (key.status === \"aborted\")\n                return INVALID;\n            if (value.status === \"aborted\")\n                return INVALID;\n            if (key.status === \"dirty\")\n                status.dirty();\n            if (value.status === \"dirty\")\n                status.dirty();\n            if (key.value !== \"__proto__\" &&\n                (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return { status: status.value, value: finalObject };\n    }\n}\nconst INVALID = Object.freeze({\n    status: \"aborted\",\n});\nconst DIRTY = (value) => ({ status: \"dirty\", value });\nconst OK = (value) => ({ status: \"valid\", value });\nconst isAborted = (x) => x.status === \"aborted\";\nconst isDirty = (x) => x.status === \"dirty\";\nconst isValid = (x) => x.status === \"valid\";\nconst isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nvar errorUtil;\n(function (errorUtil) {\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message === null || message === void 0 ? void 0 : message.message;\n})(errorUtil || (errorUtil = {}));\n\nvar _ZodEnum_cache, _ZodNativeEnum_cache;\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key) {\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        if (!this._cachedPath.length) {\n            if (this._key instanceof Array) {\n                this._cachedPath.push(...this._path, ...this._key);\n            }\n            else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n}\nconst handleResult = (ctx, result) => {\n    if (isValid(result)) {\n        return { success: true, data: result.value };\n    }\n    else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error() {\n                if (this._error)\n                    return this._error;\n                const error = new ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            },\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        var _a, _b;\n        const { message } = params;\n        if (iss.code === \"invalid_enum_value\") {\n            return { message: message !== null && message !== void 0 ? message : ctx.defaultError };\n        }\n        if (typeof ctx.data === \"undefined\") {\n            return { message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError };\n        }\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        return { message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\nclass ZodType {\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return getParsedType(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return (ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: getParsedType(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent,\n        });\n    }\n    _processInputParams(input) {\n        return {\n            status: new ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: getParsedType(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent,\n            },\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if (isAsync(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        var _a;\n        const ctx = {\n            common: {\n                issues: [],\n                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n        return handleResult(ctx, result);\n    }\n    \"~validate\"(data) {\n        var _a, _b;\n        const ctx = {\n            common: {\n                issues: [],\n                async: !!this[\"~standard\"].async,\n            },\n            path: [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        if (!this[\"~standard\"].async) {\n            try {\n                const result = this._parseSync({ data, path: [], parent: ctx });\n                return isValid(result)\n                    ? {\n                        value: result.value,\n                    }\n                    : {\n                        issues: ctx.common.issues,\n                    };\n            }\n            catch (err) {\n                if ((_b = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes(\"encountered\")) {\n                    this[\"~standard\"].async = true;\n                }\n                ctx.common = {\n                    issues: [],\n                    async: true,\n                };\n            }\n        }\n        return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result)\n            ? {\n                value: result.value,\n            }\n            : {\n                issues: ctx.common.issues,\n            });\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n                async: true,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n        const result = await (isAsync(maybeAsyncResult)\n            ? maybeAsyncResult\n            : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return { message };\n            }\n            else if (typeof message === \"function\") {\n                return message(val);\n            }\n            else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n                code: ZodIssueCode.custom,\n                ...getIssueProperties(val),\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data) => {\n                    if (!data) {\n                        setError();\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx) => {\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\"\n                    ? refinementData(val, ctx)\n                    : refinementData);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement },\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    constructor(def) {\n        /** Alias of safeParseAsync */\n        this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.readonly = this.readonly.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n        this[\"~standard\"] = {\n            version: 1,\n            vendor: \"zod\",\n            validate: (data) => this[\"~validate\"](data),\n        };\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([this, option], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform },\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def),\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch,\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description,\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    readonly() {\n        return ZodReadonly.create(this);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[0-9a-z]+$/;\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;\n// const uuidRegex =\n//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\nconst nanoidRegex = /^[a-z0-9_-]{21}$/i;\nconst jwtRegex = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/;\nconst durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\n// const emailRegex =\n//   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// const emailRegex =\n//   /^[a-zA-Z0-9\\.\\!\\#\\$\\%\\&\\'\\*\\+\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// const emailRegex =\n//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\n// const emailRegex =\n//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\\.[a-z0-9\\-]+)*$/i;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\nlet emojiRegex;\n// faster, simpler, safer\nconst ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\nconst ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/;\n// const ipv6Regex =\n// /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\nconst ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\nconst ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;\n// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript\nconst base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n// https://base64.guru/standards/base64url\nconst base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;\n// simple\n// const dateRegexSource = `\\\\d{4}-\\\\d{2}-\\\\d{2}`;\n// no leap year validation\n// const dateRegexSource = `\\\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\\\d|2\\\\d))`;\n// with leap year validation\nconst dateRegexSource = `((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))`;\nconst dateRegex = new RegExp(`^${dateRegexSource}$`);\nfunction timeRegexSource(args) {\n    // let regex = `\\\\d{2}:\\\\d{2}:\\\\d{2}`;\n    let regex = `([01]\\\\d|2[0-3]):[0-5]\\\\d:[0-5]\\\\d`;\n    if (args.precision) {\n        regex = `${regex}\\\\.\\\\d{${args.precision}}`;\n    }\n    else if (args.precision == null) {\n        regex = `${regex}(\\\\.\\\\d+)?`;\n    }\n    return regex;\n}\nfunction timeRegex(args) {\n    return new RegExp(`^${timeRegexSource(args)}$`);\n}\n// Adapted from https://stackoverflow.com/a/3143231\nfunction datetimeRegex(args) {\n    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;\n    const opts = [];\n    opts.push(args.local ? `Z?` : `Z`);\n    if (args.offset)\n        opts.push(`([+-]\\\\d{2}:?\\\\d{2})`);\n    regex = `${regex}(${opts.join(\"|\")})`;\n    return new RegExp(`^${regex}$`);\n}\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nfunction isValidJWT(jwt, alg) {\n    if (!jwtRegex.test(jwt))\n        return false;\n    try {\n        const [header] = jwt.split(\".\");\n        // Convert base64url to base64\n        const base64 = header\n            .replace(/-/g, \"+\")\n            .replace(/_/g, \"/\")\n            .padEnd(header.length + ((4 - (header.length % 4)) % 4), \"=\");\n        const decoded = JSON.parse(atob(base64));\n        if (typeof decoded !== \"object\" || decoded === null)\n            return false;\n        if (!decoded.typ || !decoded.alg)\n            return false;\n        if (alg && decoded.alg !== alg)\n            return false;\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nfunction isValidCidr(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4CidrRegex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6CidrRegex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nclass ZodString extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.string,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    else if (tooSmall) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"email\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"emoji\") {\n                if (!emojiRegex) {\n                    emojiRegex = new RegExp(_emojiRegex, \"u\");\n                }\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"emoji\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"uuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"nanoid\") {\n                if (!nanoidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"nanoid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid2\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ulid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                }\n                catch (_a) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"regex\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            }\n            else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { includes: check.value, position: check.position },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            }\n            else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            }\n            else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { startsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { endsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"date\") {\n                const regex = dateRegex;\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"date\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"time\") {\n                const regex = timeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"time\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"duration\") {\n                if (!durationRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"duration\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ip\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"jwt\") {\n                if (!isValidJWT(input.data, check.alg)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"jwt\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cidr\") {\n                if (!isValidCidr(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cidr\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64\") {\n                if (!base64Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64url\") {\n                if (!base64urlRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _regex(regex, validation, message) {\n        return this.refinement((data) => regex.test(data), {\n            validation,\n            code: ZodIssueCode.invalid_string,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    email(message) {\n        return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\n    }\n    url(message) {\n        return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\n    }\n    emoji(message) {\n        return this._addCheck({ kind: \"emoji\", ...errorUtil.errToObj(message) });\n    }\n    uuid(message) {\n        return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\n    }\n    nanoid(message) {\n        return this._addCheck({ kind: \"nanoid\", ...errorUtil.errToObj(message) });\n    }\n    cuid(message) {\n        return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid2(message) {\n        return this._addCheck({ kind: \"cuid2\", ...errorUtil.errToObj(message) });\n    }\n    ulid(message) {\n        return this._addCheck({ kind: \"ulid\", ...errorUtil.errToObj(message) });\n    }\n    base64(message) {\n        return this._addCheck({ kind: \"base64\", ...errorUtil.errToObj(message) });\n    }\n    base64url(message) {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return this._addCheck({\n            kind: \"base64url\",\n            ...errorUtil.errToObj(message),\n        });\n    }\n    jwt(options) {\n        return this._addCheck({ kind: \"jwt\", ...errorUtil.errToObj(options) });\n    }\n    ip(options) {\n        return this._addCheck({ kind: \"ip\", ...errorUtil.errToObj(options) });\n    }\n    cidr(options) {\n        return this._addCheck({ kind: \"cidr\", ...errorUtil.errToObj(options) });\n    }\n    datetime(options) {\n        var _a, _b;\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                local: false,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,\n            local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    date(message) {\n        return this._addCheck({ kind: \"date\", message });\n    }\n    time(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"time\",\n                precision: null,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"time\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    duration(message) {\n        return this._addCheck({ kind: \"duration\", ...errorUtil.errToObj(message) });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options === null || options === void 0 ? void 0 : options.position,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    /**\n     * Equivalent to `.min(1)`\n     */\n    nonempty(message) {\n        return this.min(1, errorUtil.errToObj(message));\n    }\n    trim() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }],\n        });\n    }\n    toLowerCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toLowerCase\" }],\n        });\n    }\n    toUpperCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toUpperCase\" }],\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n    }\n    get isDate() {\n        return !!this._def.checks.find((ch) => ch.kind === \"date\");\n    }\n    get isTime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"time\");\n    }\n    get isDuration() {\n        return !!this._def.checks.find((ch) => ch.kind === \"duration\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n    }\n    get isNANOID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"nanoid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n    }\n    get isCIDR() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cidr\");\n    }\n    get isBase64() {\n        return !!this._def.checks.find((ch) => ch.kind === \"base64\");\n    }\n    get isBase64url() {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return !!this._def.checks.find((ch) => ch.kind === \"base64url\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params) => {\n    var _a;\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / Math.pow(10, decCount);\n}\nclass ZodNumber extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.number,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n                if (!util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_finite,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: errorUtil.toString(message),\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: errorUtil.toString(message),\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: errorUtil.toString(message),\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch) => ch.kind === \"int\" ||\n            (ch.kind === \"multipleOf\" && util.isInteger(ch.value)));\n    }\n    get isFinite() {\n        let max = null, min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"finite\" ||\n                ch.kind === \"int\" ||\n                ch.kind === \"multipleOf\") {\n                return true;\n            }\n            else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n            else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n}\nZodNumber.create = (params) => {\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBigInt extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            try {\n                input.data = BigInt(input.data);\n            }\n            catch (_a) {\n                return this._getInvalidInput(input);\n            }\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.bigint) {\n            return this._getInvalidInput(input);\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _getInvalidInput(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.bigint,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodBigInt.create = (params) => {\n    var _a;\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.boolean,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBoolean.create = (params) => {\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.date,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_date,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime()),\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params) => {\n    return new ZodDate({\n        checks: [],\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.symbol,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodSymbol.create = (params) => {\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.undefined,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodUndefined.create = (params) => {\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.null,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodNull.create = (params) => {\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params),\n    });\n};\nclass ZodAny extends ZodType {\n    constructor() {\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodAny.create = (params) => {\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnknown extends ZodType {\n    constructor() {\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodUnknown.create = (params) => {\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.never,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n}\nZodNever.create = (params) => {\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params),\n    });\n};\nclass ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.void,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodVoid.create = (params) => {\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params),\n    });\n};\nclass ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                addIssueToContext(ctx, {\n                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n                    minimum: (tooSmall ? def.exactLength.value : undefined),\n                    maximum: (tooBig ? def.exactLength.value : undefined),\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([...ctx.data].map((item, i) => {\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result) => {\n                return ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [...ctx.data].map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: errorUtil.toString(message) },\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: { value: len, message: errorUtil.toString(message) },\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params) => {\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params),\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for (const key in schema.shape) {\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: () => newShape,\n        });\n    }\n    else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element),\n        });\n    }\n    else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    }\n    else {\n        return schema;\n    }\n}\nclass ZodObject extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */\n        this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */\n        this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null)\n            return this._cached;\n        const shape = this._def.shape();\n        const keys = util.objectKeys(shape);\n        return (this._cached = { shape, keys });\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever &&\n            this._def.unknownKeys === \"strip\")) {\n            for (const key in ctx.data) {\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys) {\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: { status: \"valid\", value: key },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys) {\n                    pairs.push({\n                        key: { status: \"valid\", value: key },\n                        value: { status: \"valid\", value: ctx.data[key] },\n                    });\n                }\n            }\n            else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (unknownKeys === \"strip\") ;\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        }\n        else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys) {\n                const value = ctx.data[key];\n                pairs.push({\n                    key: { status: \"valid\", value: key },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data,\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve()\n                .then(async () => {\n                const syncPairs = [];\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    syncPairs.push({\n                        key,\n                        value,\n                        alwaysSet: pair.alwaysSet,\n                    });\n                }\n                return syncPairs;\n            })\n                .then((syncPairs) => {\n                return ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...(message !== undefined\n                ? {\n                    errorMap: (issue, ctx) => {\n                        var _a, _b, _c, _d;\n                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;\n                        if (issue.code === \"unrecognized_keys\")\n                            return {\n                                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,\n                            };\n                        return {\n                            message: defaultError,\n                        };\n                    },\n                }\n                : {}),\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\",\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\",\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: () => ({\n                ...this._def.shape(),\n                ...augmentation,\n            }),\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */\n    merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => ({\n                ...this._def.shape(),\n                ...merging._def.shape(),\n            }),\n            typeName: ZodFirstPartyTypeKind.ZodObject,\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({ [key]: schema });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index,\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        util.objectKeys(mask).forEach((key) => {\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    /**\n     * @deprecated\n     */\n    deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            }\n            else {\n                newShape[key] = fieldSchema.optional();\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            }\n            else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while (newField instanceof ZodOptional) {\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    keyof() {\n        return createZodEnum(util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.strictCreate = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.lazycreate = (shape, params) => {\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results) {\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results) {\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx,\n                    }),\n                    ctx: childCtx,\n                };\n            })).then(handleResults);\n        }\n        else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options) {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx,\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                }\n                else if (result.status === \"dirty\" && !dirty) {\n                    dirty = { result, ctx: childCtx };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues) => new ZodError(issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params) => {\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params),\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type) => {\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    }\n    else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    }\n    else if (type instanceof ZodLiteral) {\n        return [type.value];\n    }\n    else if (type instanceof ZodEnum) {\n        return type.options;\n    }\n    else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return util.objectValues(type.enum);\n    }\n    else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else if (type instanceof ZodUndefined) {\n        return [undefined];\n    }\n    else if (type instanceof ZodNull) {\n        return [null];\n    }\n    else if (type instanceof ZodOptional) {\n        return [undefined, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodNullable) {\n        return [null, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodBranded) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodReadonly) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodCatch) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else {\n        return [];\n    }\n};\nclass ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [discriminator],\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n        else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */\n    static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options) {\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues.length) {\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues) {\n                if (optionsMap.has(value)) {\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params),\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = getParsedType(a);\n    const bType = getParsedType(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n        const bKeys = util.objectKeys(b);\n        const sharedKeys = util\n            .objectKeys(a)\n            .filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return { valid: false };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    else if (aType === ZodParsedType.date &&\n        bType === ZodParsedType.date &&\n        +a === +b) {\n        return { valid: true, data: a };\n    }\n    else {\n        return { valid: false };\n    }\n}\nclass ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight) => {\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n                return INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.invalid_intersection_types,\n                });\n                return INVALID;\n            }\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n                status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n            ]).then(([left, right]) => handleParsed(left, right));\n        }\n        else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params) => {\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params),\n    });\n};\nclass ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            return INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            status.dirty();\n        }\n        const items = [...ctx.data]\n            .map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n                return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        })\n            .filter((x) => !!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n                return ParseStatus.mergeArray(status, results);\n            });\n        }\n        else {\n            return ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest,\n        });\n    }\n}\nZodTuple.create = (schemas, params) => {\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params),\n    });\n};\nclass ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for (const key in ctx.data) {\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (ctx.common.async) {\n            return ParseStatus.mergeObjectAsync(status, pairs);\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third),\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second),\n        });\n    }\n}\nclass ZodMap extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.map) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.map,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async () => {\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return { status: status.value, value: finalMap };\n            });\n        }\n        else {\n            const finalMap = new Map();\n            for (const pair of pairs) {\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params) => {\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.set) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.set,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message,\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements) {\n                if (element.status === \"aborted\")\n                    return INVALID;\n                if (element.status === \"dirty\")\n                    status.dirty();\n                parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n        }\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\n        }\n        else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: errorUtil.toString(message) },\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params) => {\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params),\n    });\n};\nclass ZodFunction extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.function) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.function,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return makeIssue({\n                data: args,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_arguments,\n                    argumentsError: error,\n                },\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return makeIssue({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_return_type,\n                    returnTypeError: error,\n                },\n            });\n        }\n        const params = { errorMap: ctx.common.contextualErrorMap };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(async function (...args) {\n                const error = new ZodError([]);\n                const parsedArgs = await me._def.args\n                    .parseAsync(args, params)\n                    .catch((e) => {\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await Reflect.apply(fn, this, parsedArgs);\n                const parsedReturns = await me._def.returns._def.type\n                    .parseAsync(result, params)\n                    .catch((e) => {\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        }\n        else {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(function (...args) {\n                const parsedArgs = me._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\n                }\n                const result = Reflect.apply(fn, this, parsedArgs.data);\n                const parsedReturns = me._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType,\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: (args\n                ? args\n                : ZodTuple.create([]).rest(ZodUnknown.create())),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params),\n        });\n    }\n}\nclass ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n    }\n}\nZodLazy.create = (getter, params) => {\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params),\n    });\n};\nclass ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_literal,\n                expected: this._def.value,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params) => {\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params),\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params),\n    });\n}\nclass ZodEnum extends ZodType {\n    constructor() {\n        super(...arguments);\n        _ZodEnum_cache.set(this, void 0);\n    }\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\").has(input.data)) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values, newDef = this._def) {\n        return ZodEnum.create(values, {\n            ...this._def,\n            ...newDef,\n        });\n    }\n    exclude(values, newDef = this._def) {\n        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {\n            ...this._def,\n            ...newDef,\n        });\n    }\n}\n_ZodEnum_cache = new WeakMap();\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n    constructor() {\n        super(...arguments);\n        _ZodNativeEnum_cache.set(this, void 0);\n    }\n    _parse(input) {\n        const nativeEnumValues = util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== ZodParsedType.string &&\n            ctx.parsedType !== ZodParsedType.number) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\").has(input.data)) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\n_ZodNativeEnum_cache = new WeakMap();\nZodNativeEnum.create = (values, params) => {\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params),\n    });\n};\nclass ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.promise &&\n            ctx.common.async === false) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.promise,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const promisified = ctx.parsedType === ZodParsedType.promise\n            ? ctx.data\n            : Promise.resolve(ctx.data);\n        return OK(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap,\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params) => {\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params),\n    });\n};\nclass ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects\n            ? this._def.schema.sourceType()\n            : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        const checkCtx = {\n            addIssue: (arg) => {\n                addIssueToContext(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                }\n                else {\n                    status.dirty();\n                }\n            },\n            get path() {\n                return ctx.path;\n            },\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data, checkCtx);\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then(async (processed) => {\n                    if (status.value === \"aborted\")\n                        return INVALID;\n                    const result = await this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                    if (result.status === \"aborted\")\n                        return INVALID;\n                    if (result.status === \"dirty\")\n                        return DIRTY(result.value);\n                    if (status.value === \"dirty\")\n                        return DIRTY(result.value);\n                    return result;\n                });\n            }\n            else {\n                if (status.value === \"aborted\")\n                    return INVALID;\n                const result = this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (result.status === \"aborted\")\n                    return INVALID;\n                if (result.status === \"dirty\")\n                    return DIRTY(result.value);\n                if (status.value === \"dirty\")\n                    return DIRTY(result.value);\n                return result;\n            }\n        }\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc) => {\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inner.status === \"aborted\")\n                    return INVALID;\n                if (inner.status === \"dirty\")\n                    status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return { status: status.value, value: inner.value };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((inner) => {\n                    if (inner.status === \"aborted\")\n                        return INVALID;\n                    if (inner.status === \"dirty\")\n                        status.dirty();\n                    return executeRefinement(inner.value).then(() => {\n                        return { status: status.value, value: inner.value };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (!isValid(base))\n                    return base;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return { status: status.value, value: result };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((base) => {\n                    if (!isValid(base))\n                        return base;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));\n                });\n            }\n        }\n        util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params) => {\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params),\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n    return new ZodEffects({\n        schema,\n        effect: { type: \"preprocess\", transform: preprocess },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params),\n    });\n};\nclass ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.undefined) {\n            return OK(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.null) {\n            return OK(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params) => {\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params) => {\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\"\n            ? params.default\n            : () => params.default,\n        ...processCreateParams(params),\n    });\n};\nclass ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: [],\n            },\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx,\n            },\n        });\n        if (isAsync(result)) {\n            return result.then((result) => {\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\"\n                        ? result.value\n                        : this._def.catchValue({\n                            get error() {\n                                return new ZodError(newCtx.common.issues);\n                            },\n                            input: newCtx.data,\n                        }),\n                };\n            });\n        }\n        else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\"\n                    ? result.value\n                    : this._def.catchValue({\n                        get error() {\n                            return new ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data,\n                    }),\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params) => {\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.nan,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n}\nZodNaN.create = (params) => {\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params),\n    });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nclass ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async () => {\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inResult.status === \"aborted\")\n                    return INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return DIRTY(inResult.value);\n                }\n                else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                }\n            };\n            return handleAsync();\n        }\n        else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n            if (inResult.status === \"aborted\")\n                return INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value,\n                };\n            }\n            else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline,\n        });\n    }\n}\nclass ZodReadonly extends ZodType {\n    _parse(input) {\n        const result = this._def.innerType._parse(input);\n        const freeze = (data) => {\n            if (isValid(data)) {\n                data.value = Object.freeze(data.value);\n            }\n            return data;\n        };\n        return isAsync(result)\n            ? result.then((data) => freeze(data))\n            : freeze(result);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodReadonly.create = (type, params) => {\n    return new ZodReadonly({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodReadonly,\n        ...processCreateParams(params),\n    });\n};\n////////////////////////////////////////\n////////////////////////////////////////\n//////////                    //////////\n//////////      z.custom      //////////\n//////////                    //////////\n////////////////////////////////////////\n////////////////////////////////////////\nfunction cleanParams(params, data) {\n    const p = typeof params === \"function\"\n        ? params(data)\n        : typeof params === \"string\"\n            ? { message: params }\n            : params;\n    const p2 = typeof p === \"string\" ? { message: p } : p;\n    return p2;\n}\nfunction custom(check, _params = {}, \n/**\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */\nfatal) {\n    if (check)\n        return ZodAny.create().superRefine((data, ctx) => {\n            var _a, _b;\n            const r = check(data);\n            if (r instanceof Promise) {\n                return r.then((r) => {\n                    var _a, _b;\n                    if (!r) {\n                        const params = cleanParams(_params, data);\n                        const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n                        ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n                    }\n                });\n            }\n            if (!r) {\n                const params = cleanParams(_params, data);\n                const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n                ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n            }\n            return;\n        });\n    return ZodAny.create();\n}\nconst late = {\n    object: ZodObject.lazycreate,\n};\nvar ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n    ZodFirstPartyTypeKind[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\nconst instanceOfType = (\n// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls, params = {\n    message: `Input not instance of ${cls.name}`,\n}) => custom((data) => data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nconst coerce = {\n    string: ((arg) => ZodString.create({ ...arg, coerce: true })),\n    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),\n    boolean: ((arg) => ZodBoolean.create({\n        ...arg,\n        coerce: true,\n    })),\n    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),\n    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),\n};\nconst NEVER = INVALID;\n\nvar z = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    defaultErrorMap: errorMap,\n    setErrorMap: setErrorMap,\n    getErrorMap: getErrorMap,\n    makeIssue: makeIssue,\n    EMPTY_PATH: EMPTY_PATH,\n    addIssueToContext: addIssueToContext,\n    ParseStatus: ParseStatus,\n    INVALID: INVALID,\n    DIRTY: DIRTY,\n    OK: OK,\n    isAborted: isAborted,\n    isDirty: isDirty,\n    isValid: isValid,\n    isAsync: isAsync,\n    get util () { return util; },\n    get objectUtil () { return objectUtil; },\n    ZodParsedType: ZodParsedType,\n    getParsedType: getParsedType,\n    ZodType: ZodType,\n    datetimeRegex: datetimeRegex,\n    ZodString: ZodString,\n    ZodNumber: ZodNumber,\n    ZodBigInt: ZodBigInt,\n    ZodBoolean: ZodBoolean,\n    ZodDate: ZodDate,\n    ZodSymbol: ZodSymbol,\n    ZodUndefined: ZodUndefined,\n    ZodNull: ZodNull,\n    ZodAny: ZodAny,\n    ZodUnknown: ZodUnknown,\n    ZodNever: ZodNever,\n    ZodVoid: ZodVoid,\n    ZodArray: ZodArray,\n    ZodObject: ZodObject,\n    ZodUnion: ZodUnion,\n    ZodDiscriminatedUnion: ZodDiscriminatedUnion,\n    ZodIntersection: ZodIntersection,\n    ZodTuple: ZodTuple,\n    ZodRecord: ZodRecord,\n    ZodMap: ZodMap,\n    ZodSet: ZodSet,\n    ZodFunction: ZodFunction,\n    ZodLazy: ZodLazy,\n    ZodLiteral: ZodLiteral,\n    ZodEnum: ZodEnum,\n    ZodNativeEnum: ZodNativeEnum,\n    ZodPromise: ZodPromise,\n    ZodEffects: ZodEffects,\n    ZodTransformer: ZodEffects,\n    ZodOptional: ZodOptional,\n    ZodNullable: ZodNullable,\n    ZodDefault: ZodDefault,\n    ZodCatch: ZodCatch,\n    ZodNaN: ZodNaN,\n    BRAND: BRAND,\n    ZodBranded: ZodBranded,\n    ZodPipeline: ZodPipeline,\n    ZodReadonly: ZodReadonly,\n    custom: custom,\n    Schema: ZodType,\n    ZodSchema: ZodType,\n    late: late,\n    get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },\n    coerce: coerce,\n    any: anyType,\n    array: arrayType,\n    bigint: bigIntType,\n    boolean: booleanType,\n    date: dateType,\n    discriminatedUnion: discriminatedUnionType,\n    effect: effectsType,\n    'enum': enumType,\n    'function': functionType,\n    'instanceof': instanceOfType,\n    intersection: intersectionType,\n    lazy: lazyType,\n    literal: literalType,\n    map: mapType,\n    nan: nanType,\n    nativeEnum: nativeEnumType,\n    never: neverType,\n    'null': nullType,\n    nullable: nullableType,\n    number: numberType,\n    object: objectType,\n    oboolean: oboolean,\n    onumber: onumber,\n    optional: optionalType,\n    ostring: ostring,\n    pipeline: pipelineType,\n    preprocess: preprocessType,\n    promise: promiseType,\n    record: recordType,\n    set: setType,\n    strictObject: strictObjectType,\n    string: stringType,\n    symbol: symbolType,\n    transformer: effectsType,\n    tuple: tupleType,\n    'undefined': undefinedType,\n    union: unionType,\n    unknown: unknownType,\n    'void': voidType,\n    NEVER: NEVER,\n    ZodIssueCode: ZodIssueCode,\n    quotelessJson: quotelessJson,\n    ZodError: ZodError\n});\n\nexport { BRAND, DIRTY, EMPTY_PATH, INVALID, NEVER, OK, ParseStatus, ZodType as Schema, ZodAny, ZodArray, ZodBigInt, ZodBoolean, ZodBranded, ZodCatch, ZodDate, ZodDefault, ZodDiscriminatedUnion, ZodEffects, ZodEnum, ZodError, ZodFirstPartyTypeKind, ZodFunction, ZodIntersection, ZodIssueCode, ZodLazy, ZodLiteral, ZodMap, ZodNaN, ZodNativeEnum, ZodNever, ZodNull, ZodNullable, ZodNumber, ZodObject, ZodOptional, ZodParsedType, ZodPipeline, ZodPromise, ZodReadonly, ZodRecord, ZodType as ZodSchema, ZodSet, ZodString, ZodSymbol, ZodEffects as ZodTransformer, ZodTuple, ZodType, ZodUndefined, ZodUnion, ZodUnknown, ZodVoid, addIssueToContext, anyType as any, arrayType as array, bigIntType as bigint, booleanType as boolean, coerce, custom, dateType as date, datetimeRegex, z as default, errorMap as defaultErrorMap, discriminatedUnionType as discriminatedUnion, effectsType as effect, enumType as enum, functionType as function, getErrorMap, getParsedType, instanceOfType as instanceof, intersectionType as intersection, isAborted, isAsync, isDirty, isValid, late, lazyType as lazy, literalType as literal, makeIssue, mapType as map, nanType as nan, nativeEnumType as nativeEnum, neverType as never, nullType as null, nullableType as nullable, numberType as number, objectType as object, objectUtil, oboolean, onumber, optionalType as optional, ostring, pipelineType as pipeline, preprocessType as preprocess, promiseType as promise, quotelessJson, recordType as record, setType as set, setErrorMap, strictObjectType as strictObject, stringType as string, symbolType as symbol, effectsType as transformer, tupleType as tuple, undefinedType as undefined, unionType as union, unknownType as unknown, util, voidType as void, z };\n","import { z } from \"zod\";\r\n/**\r\n * Text to image options\r\n */\r\n\r\nexport const zFluxText2ImgParams = z.object({\r\n  prompt: z.string().default(\"\"),\r\n  aspect_ratio: z.string().default(\"1:1\"),\r\n  num_outputs: z.number().int().default(1),\r\n  num_inference_steps: z.number().int().gt(0).lt(5).default(4),\r\n  seed: z.number().int().optional().default(() => Math.floor(Math.random() * 1_000_000)),\r\n  output_format: z.string().default(\"jpg\"),\r\n  disable_safety_checker: z.boolean().default(false),\r\n  go_fast: z.boolean().default(false),\r\n});\r\n\r\n// TypeScript type inference from Zod schema\r\nexport type FluxText2ImgPostParams = z.infer<typeof zFluxText2ImgParams>;\r\n","import { ApiClient } from '../../../core/web/APIClient';\r\nimport { TrackedJob } from '../../../core/job/TrackedJob';\r\nimport { FluxText2ImgPostParams, zFluxText2ImgParams } from \"./types\";\r\nimport { IText2Image } from './IText2Image';\r\nimport { MediaFile } from '../../../media-toolkit-js/MediaFile';\r\n\r\n/**\r\n * Client for the FluxSchnell text-to-image model\r\n */\r\nexport class FluxSchnell extends ApiClient implements IText2Image {\r\n  constructor() {\r\n    super('flux-schnell');\r\n  }\r\n  /**\r\n   * Register FluxSchnell specific endpoints\r\n   */\r\n  protected registerEndpoints(): void {\r\n    this.registerEndpoint({\r\n      path: 'text2img',\r\n      method: 'POST',\r\n      queryParams: zFluxText2ImgParams.parse({}),\r\n    });\r\n  }\r\n  \r\n  async parseResult(full_output: any): Promise<MediaFile | Array<MediaFile> | any> {\r\n    if (Array.isArray(full_output)) {\r\n      return Promise.all(full_output.map((file) => new MediaFile().fromAny(file)));\r\n    }\r\n    return await new MediaFile().fromAny(full_output);\r\n  }\r\n\r\n  /**\r\n   * Generate an image from a text prompt\r\n   * @param text - Text description of the desired image\r\n   * @param args - Additional arguments (Python *args equivalent)\r\n   * @param kwargs - Additional options (Python **kwargs equivalent)\r\n   * @returns TrackedJob that resolves to the generated image\r\n   */\r\n  text2img(text: string, options?: Partial<FluxText2ImgPostParams>): Promise<TrackedJob<MediaFile | Array<MediaFile> | any>> {\r\n    // Get endpoint details\r\n    const endpoint = this.getEndpoint('text2img');\r\n    \r\n    // Create a complete params object with user options and defaults\r\n    const params = zFluxText2ImgParams.parse({\r\n      ...options,\r\n      prompt: text,  // Always use the text parameter as the prompt\r\n    });\r\n    \r\n    // Submit job to API\r\n    return this.submitTrackedJob(endpoint, params, this.parseResult);\r\n  }\r\n}\r\n","import { z } from \"zod\";\r\n/**\r\n * Text to image options\r\n */\r\n\r\nexport const zDeepSeekR1Params = z.object({\r\n  prompt: z.string().default(\"\"),\r\n  max_tokens: z.number().int().default(20480),\r\n  temperature: z.number().gt(0).lt(1).default(0.1),\r\n  presence_penalty: z.number().gte(0).lte(1).default(0.0),\r\n  frequency_penalty: z.number().gte(0).lte(1).default(0.0),\r\n  top_p: z.number().gte(0).lte(1).default(1.0),\r\n});\r\n\r\n// TypeScript type inference from Zod schema\r\nexport type DeepSeekR1Params = z.infer<typeof zDeepSeekR1Params>;\r\n","import { ApiClient } from '../../../core/web/APIClient';\r\nimport { TrackedJob } from '../../../core/job/TrackedJob';\r\nimport { DeepSeekR1Params, zDeepSeekR1Params } from \"../types\";\r\nimport { IChat } from './BaseChat';\r\n\r\n\r\nexport class DeepSeekResult {\r\n  answer: string;\r\n  thoughts: string;\r\n  constructor(full_output: Array<string> | string) {\r\n    if (Array.isArray(full_output)) {\r\n      full_output = full_output.join(\"\")\r\n    }\r\n    let pos_think = full_output.indexOf(\"<think>\")\r\n    let end_think = full_output.indexOf(\"</think>\", pos_think+7)\r\n    this.thoughts = full_output.substring(pos_think+7, end_think)\r\n    this.answer = full_output.substring(end_think+8)\r\n  }\r\n}\r\n\r\n/**\r\n * Client for the FluxSchnell text-to-image model\r\n */\r\nexport class DeepSeekR1 extends ApiClient implements IChat {\r\n  constructor() {\r\n    super('deepseek-r1');\r\n  }\r\n  /**\r\n   * Register FluxSchnell specific endpoints\r\n   */\r\n  protected registerEndpoints(): void {\r\n    this.registerEndpoint({\r\n      path: 'chat',\r\n      method: 'POST',\r\n      queryParams: zDeepSeekR1Params.parse({}),\r\n    });\r\n  }\r\n\r\n  async _parse_result(full_output: any): Promise<DeepSeekResult> {\r\n    return new DeepSeekResult(full_output);\r\n  }\r\n  \r\n  async _infer(prompt: string, options?: Partial<DeepSeekR1Params>): Promise<TrackedJob<DeepSeekResult>> {\r\n    // Get endpoint details\r\n    const endpoint = this.getEndpoint('chat');\r\n    \r\n    // Create a complete params object with user options and defaults\r\n    const params = zDeepSeekR1Params.parse({\r\n      ...options,\r\n      prompt: prompt,  // Always use the text parameter as the prompt\r\n    });\r\n    \r\n    // Get TrackedJob instance without awaiting\r\n    return this.submitTrackedJob(endpoint, params, this._parse_result);\r\n  }\r\n\r\n/**\r\n * Generate a chat response from a text prompt\r\n * @param prompt - Text prompt for the chat model\r\n * @param options - Additional options for the request\r\n * @returns Promise that resolves to the generated response text\r\n */\r\n  async chat(prompt: string, options?: Partial<DeepSeekR1Params>): Promise<TrackedJob<string>> {\r\n    const job = await this._infer(prompt, options);\r\n    return job.answer;\r\n  }\r\n}\r\n","import { z } from 'zod';\r\nimport { MediaFile } from '../../../media-toolkit-js';\r\n\r\nexport const allowedMediaTypes = z.union([\r\n  z.string(),\r\n  z.null(),\r\n  z.instanceof(Blob),\r\n  z.instanceof(File),\r\n  z.instanceof(MediaFile),\r\n  // Add Buffer type for Node.js environment\r\n  z.instanceof(Buffer)\r\n]).default(null);\r\n\r\n// Define the parameter schemas for the endpoints\r\nexport const zSwapImgToImgParams = z.object({\r\n  enhance_face_model: z.string().optional().default('gpen_bfr_512')\r\n});\r\nexport const zSwapImgToImgFileParams= z.object({\r\n  source_img: allowedMediaTypes,\r\n  target_img: allowedMediaTypes,\r\n}); // allows the fields to be initially undefined\r\n\r\nexport const zSwapParams = z.object({\r\n    faces: z.union([z.string(), z.array(z.string()), z.record(z.string(), z.any())]).default(''),\r\n    enhance_face_model: z.string().optional(),\r\n});\r\n\r\nexport const zAddFaceParams = z.object({\r\n    face_name: z.string().default(''),\r\n    save: z.boolean().optional().default(false)\r\n});\r\n\r\nexport const zSwapVideoParams = z.object({\r\n  face_name: z.string().default(''),\r\n  include_audio: z.boolean().optional().default(true),\r\n  enhance_face_model: z.string().optional().default('gpen_bfr_512')\r\n});\r\n\r\n// Export the types based on the Zod schemas\r\nexport type SwapImgToImgParams = z.infer<typeof zSwapImgToImgParams>;\r\nexport type SwapParams = z.infer<typeof zSwapParams>;\r\nexport type AddFaceParams = z.infer<typeof zAddFaceParams>;\r\nexport type SwapVideoParams = z.infer<typeof zSwapVideoParams>;\r\n","import { IFaceSwap } from './IFaceSwap';\r\nimport { ApiClient } from '../../../core/web/APIClient';\r\nimport { TrackedJob } from '../../../core/job/TrackedJob';\r\nimport { MediaFile } from '../../../media-toolkit-js/MediaFile';\r\nimport { z } from 'zod';\r\n\r\nimport {\r\n     zSwapImgToImgParams, zSwapImgToImgFileParams, zSwapParams, zAddFaceParams, zSwapVideoParams, \r\n     SwapImgToImgParams, SwapParams, AddFaceParams, SwapVideoParams, allowedMediaTypes\r\n} from './types';\r\n\r\n/**\r\n * Client for the Face2Face image and video face swapping service\r\n */\r\nexport class Face2Face extends ApiClient implements IFaceSwap {\r\n  constructor() {\r\n    super('face2face');\r\n  }\r\n\r\n  /**\r\n   * Register Face2Face specific endpoints\r\n   */\r\n  protected registerEndpoints(): void {\r\n    this.registerEndpoint({\r\n      path: 'swap_img_to_img',\r\n      method: 'POST',\r\n      queryParams: zSwapImgToImgParams.parse({}),\r\n      fileParams: zSwapImgToImgFileParams.parse({}),\r\n    });\r\n\r\n    this.registerEndpoint({\r\n      path: 'swap',\r\n      method: 'POST',\r\n      queryParams: zSwapParams.parse({}),\r\n      fileParams: z.object({ media: allowedMediaTypes}).parse({}),\r\n    });\r\n\r\n    this.registerEndpoint({\r\n      path: 'add_face',\r\n      method: 'POST',\r\n      queryParams: zAddFaceParams.parse({}),\r\n      fileParams: z.object({ image: allowedMediaTypes}).parse({}),\r\n    });\r\n\r\n    this.registerEndpoint({\r\n      path: 'swap_video',\r\n      method: 'POST',\r\n      queryParams: zSwapVideoParams.parse({}),\r\n      fileParams: z.object({ target_video: allowedMediaTypes}).parse({}),\r\n    });\r\n  }\r\n\r\n  async parseResult(full_output: any): Promise<MediaFile | Array<MediaFile> | any> {\r\n    if (Array.isArray(full_output)) {\r\n      return Promise.all(full_output.map((file) => new MediaFile().fromAny(file)));\r\n    }\r\n    return await new MediaFile().fromAny(full_output);\r\n  }\r\n\r\n  /**\r\n   * Swap faces between a source image and target image\r\n   * @param sourceImg - Source image containing the face to use\r\n   * @param targetImg - Target image where the face will be swapped\r\n   * @param options - Additional options like enhance_face_model\r\n   * @returns TrackedJob that resolves to the processed image\r\n   */\r\n  async swapImg2Img(\r\n    sourceImg: MediaFile | string, \r\n    targetImg: MediaFile | string, \r\n    options?: Partial<SwapImgToImgParams>\r\n  ): Promise<TrackedJob<MediaFile>> {\r\n    const endpoint = this.getEndpoint('swap-img-to-img');\r\n\r\n    // Convert inputs to MediaFile if they're strings\r\n    const sourceMediaFile = await MediaFile.create(sourceImg);\r\n    const targetMediaFile = await MediaFile.create(targetImg);\r\n\r\n    if (!sourceMediaFile || !targetMediaFile) {\r\n      throw new Error('Invalid source or target image');\r\n    }\r\n\r\n    let queryParams = zSwapImgToImgParams.parse(options || {})\r\n    let fileParams = zSwapImgToImgFileParams.parse({ source_img: sourceMediaFile, target_img: targetMediaFile });\r\n    let params = { ...queryParams, ...fileParams };\r\n    return this.submitTrackedJob(endpoint, params, this.parseResult);\r\n  }\r\n\r\n  /**\r\n   * Apply face swapping on a single image with predefined faces\r\n   * @param media - Image where faces should be swapped\r\n   * @param options - Options including which faces to use and enhance settings\r\n   * @returns TrackedJob that resolves to the processed image\r\n   */\r\n  async swap(\r\n    media: MediaFile | string, \r\n    options?: Partial<SwapParams>\r\n  ): Promise<TrackedJob<MediaFile>> {\r\n    const endpoint = this.getEndpoint('swap');\r\n\r\n    const mediaFile = await MediaFile.create(media);\r\n    if (!mediaFile) {\r\n      throw new Error('Invalid media file');\r\n    }\r\n\r\n    const QueryParams = zSwapParams.parse(options || {});\r\n    const fileParams = { media: mediaFile };\r\n    const params = { ...QueryParams, ...fileParams };\r\n    return this.submitTrackedJob(endpoint, params, this.parseResult);\r\n  }\r\n\r\n  /**\r\n   * Add a face to the face library for later use in swapping\r\n   * @param image - Image containing the face to add\r\n   * @param options - Options including the face name and whether to save it\r\n   * @returns TrackedJob that resolves to the operation result\r\n   */\r\n  async addFace(\r\n    image: MediaFile | string, \r\n    faceName: string, \r\n    save: boolean = true\r\n  ): Promise<TrackedJob<any>> {\r\n    const endpoint = this.getEndpoint('add_face');\r\n\r\n    const imageFile = await MediaFile.create(image);\r\n    if (!imageFile) {\r\n      throw new Error('Invalid image file');\r\n    }\r\n\r\n    const params = zAddFaceParams.parse({ \r\n        image: imageFile.toBase64(),\r\n        face_name: faceName, \r\n        save \r\n    });\r\n \r\n    return this.submitTrackedJob(endpoint, params, this.parseResult);\r\n  }\r\n\r\n  /**\r\n   * Swap faces in a video using a previously added face\r\n   * @param targetVideo - Video where faces should be swapped\r\n   * @param faceName - Name of the face to use (previously added with addFace)\r\n   * @param options - Additional options like include_audio and enhance settings\r\n   * @returns TrackedJob that resolves to the processed video\r\n   */\r\n  async swapVideo(\r\n    targetVideo: MediaFile | string, \r\n    faceName: string, \r\n    options?: Partial<Omit<SwapVideoParams, 'face_name'>>\r\n  ): Promise<TrackedJob<MediaFile>> {\r\n    const endpoint = this.getEndpoint('swap_video');\r\n\r\n    const videoFile = await MediaFile.create(targetVideo);\r\n    if (!videoFile) {\r\n      throw new Error('Invalid video file');\r\n    }\r\n\r\n    const params = zSwapVideoParams.parse({\r\n      face_name: faceName,\r\n      ...options\r\n    });\r\n    \r\n    const fileData = { target_video: videoFile };\r\n\r\n    return this.submitTrackedJob(endpoint, params, this.parseResult);\r\n  }\r\n}","import { Configuration } from '../core/configuration';\r\nimport { FluxSchnell } from './image/text2img/FluxSchnell';\r\nimport { TrackedJob } from '../core/job/TrackedJob';\r\nimport { IText2Image } from './image/text2img/IText2Image';\r\nimport { MediaFile } from '../media-toolkit-js/MediaFile';\r\nimport { DeepSeekR1 } from './text/chat/deepseekr1';\r\nimport { APIClientFactory } from '../core/web/APIClientFactory';\r\nimport { IChat } from './text/chat/BaseChat';\r\nimport { IFaceSwap } from './image/img2img/IFaceSwap';\r\nimport { Face2Face } from './image/img2img/face2face';\r\n\r\n// SimpleAPI class that supports multiple models\r\n// Register available client types\r\nAPIClientFactory.registerClientType('flux-schnell', FluxSchnell);\r\nAPIClientFactory.registerClientType('deepseek-r1', DeepSeekR1);\r\nAPIClientFactory.registerClientType('face2face', Face2Face);\r\n\r\n// API.ts - Simplified API interface\r\nexport class SocaityAPI {\r\n  constructor(configOptions: Partial<Configuration> = {}) {\r\n    Configuration.update(configOptions);\r\n  }\r\n  \r\n  async text2img(prompt: string, model: string = 'flux-schnell', options?: Record<string, any>): Promise<TrackedJob<MediaFile | any>> {\r\n    const client = APIClientFactory.getClient<IText2Image | FluxSchnell>(model);\r\n    return client.text2img(prompt, options);\r\n  }\r\n  \r\n  async chat(prompt: string, model: string = 'deepseek-r1', options?: Record<string, any>): Promise<TrackedJob<string | any>> {\r\n    const client = APIClientFactory.getClient<IChat | DeepSeekR1>(model);\r\n    return client.chat(prompt, options);\r\n  }\r\n\r\n  async swapImg2Img(sourceImg: MediaFile | string, targetImg: MediaFile | string, model: string = 'face2face', options?: Record<string, any>): Promise<TrackedJob<MediaFile | any>> {\r\n    const client = APIClientFactory.getClient<IFaceSwap>(model);\r\n    return client.swapImg2Img(sourceImg, targetImg, options);\r\n  }\r\n  \r\n  getAvailableModels(): string[] {\r\n    return APIClientFactory.getAvailableClients();\r\n  }\r\n}\r\n\r\n","import { RequestHandler } from './web/RequestHandler';\r\nimport { JobManager } from './job/JobManager';\r\nimport { Configuration } from './configuration';\r\nimport { SocaityJob } from '../types';\r\nimport { SocaityAPI } from '../api/API';\r\nimport { IConfig } from '../types';\r\n\r\n/**\r\n * Main Socaity SDK class\r\n * Provides methods to interact with Socaity API services\r\n */\r\nexport class SocaitySDK extends SocaityAPI {\r\n  private requestHandler: RequestHandler;\r\n  private jobManager: JobManager;\r\n\r\n  constructor(configOptions: Partial<IConfig> = {}) {\r\n    super(configOptions);\r\n    this.requestHandler = new RequestHandler();\r\n    this.jobManager = JobManager.getInstance(this.requestHandler);\r\n  }\r\n\r\n  /**\r\n   * Set the API key globally\r\n   */\r\n  setApiKey(apiKey: string): void {\r\n    Configuration.update({ apiKey });\r\n  }\r\n\r\n  /**\r\n   * Set the base URL globally\r\n   */\r\n  setBaseUrl(url: string): void {\r\n    Configuration.update({ baseUrl: url });\r\n  }\r\n\r\n  /**\r\n   * Get a list of all active jobs\r\n   * @returns Array of all tracked jobs\r\n   */\r\n  getJobs(): SocaityJob[] {\r\n    return this.jobManager.getAllJobs();\r\n  }\r\n\r\n  /**\r\n   * Get a specific job by ID\r\n   * @param jobId - ID of the job to retrieve\r\n   * @returns The job if found, undefined otherwise\r\n   */\r\n  getJob(jobId: string): SocaityJob | undefined {\r\n    return this.jobManager.getJob(jobId);\r\n  }\r\n\r\n  /**\r\n   * Cancel a running job\r\n   * @param jobId - ID of the job to cancel\r\n   * @returns Promise resolving to true if successful\r\n   */\r\n  async cancelJob(jobId: string): Promise<boolean> {\r\n    return this.jobManager.cancelJob(jobId);\r\n  }\r\n}\r\n","import { SocaitySDK, APIClientFactory } from './core';\r\nexport { MediaFile } from './media-toolkit-js';\r\n\r\n// Create singleton instance\r\nconst socaity = new SocaitySDK();\r\n\r\n// Export both the instance and the class\r\nexport { socaity, SocaitySDK, APIClientFactory };\r\n\r\n// For UMD/browser builds, export the instance directly\r\nif (typeof window !== 'undefined') {\r\n  // Direct assignment to global\r\n  (window as any).socaity = socaity;\r\n}\r\n\r\n// For CommonJS environments\r\nif (typeof module !== 'undefined' && module.exports) {\r\n  module.exports = socaity;\r\n  // Add class as a property if needed\r\n  module.exports.SocaitySDK = SocaitySDK;\r\n}\r\n\r\n// Nicer error handling for custom errors which don't require a stack trace\r\nprocess.on('uncaughtException', (error) => {\r\n  // Check if it's our ApiKeyError with hideStack enabled\r\n  if (error.name === 'ApiKeyError') {\r\n    console.error(`${error.name}: ${error.message}`);\r\n    process.exit(1);\r\n  } else {\r\n    // For other errors, let Node handle them normally\r\n    throw error;\r\n  }\r\n});"],"names":["ApiKeyError","message","_Configuration","config","__publicField","instance","Configuration","isFileResult","obj","isUrl","url","parsed","isBase64Data","data","isBase64String","str","MediaFile","file_name","content_type","buffer","filePath","path","error","headers","response","contentDisposition","fileNameMatch","pathSegments","fileName","base64Data","mediaType","tempView","arrayBuffer","tempBuffer","fileResult","includeDataUri","bytes","binary","chunkSize","chunk","saveFilename","fs","mod","directory","blob","unit","sizeInBytes","commonMimeTypes","ext","_a","contentType","extension","mimeType","extensionToMime","header","content","mediaTypeMatch","base64","binaryString","i","FastCloud","sasUrl","file","files","extensions","f","sasUrls","uploadPromises","index","savePath","RequestHandler","definingParams","params","matchedParams","key","value","endpoint","result","totalSizeMB","mediaFiles","mediaFile","fileArray","urls","apiKey","searchParams","queryString","status","errorText","errorJson","method","queryParams","bodyParams","fileParams","signal","requestBody","allParams","formData","timeoutId","JobStatus","ProcessingPhase","ResponseParser","state","progressValue","progressMessage","r","_JobManager","requestHandler","job","jobId","retries","updatedJob","parsedJob","resolve","JobManager","isNode","cliProgress","_ProgressBarManager","phase","bar","percent","payload","ProgressBarManager","TrackedJob","apiJob","jobManager","onParseResult","verbose","reject","progressPercent","eventName","callback","args","listeners","listener","progress","currentResult","callbackResult","success","onfulfilled","onrejected","_APIClientFactory","name","constructor","factory","normalizedName","client","APIClientFactory","ApiClient","sanitzized_path","util","val","assertIs","_arg","assertNever","_x","items","item","validKeys","k","filtered","e","object","keys","arr","checker","joinValues","array","separator","_","objectUtil","first","second","ZodParsedType","getParsedType","ZodIssueCode","quotelessJson","ZodError","issues","sub","subs","actualProto","_mapper","mapper","issue","fieldErrors","processError","curr","el","formErrors","errorMap","_ctx","overrideErrorMap","setErrorMap","map","getErrorMap","makeIssue","errorMaps","issueData","fullPath","fullIssue","errorMessage","maps","m","EMPTY_PATH","addIssueToContext","ctx","overrideMap","x","ParseStatus","results","arrayValue","s","INVALID","pairs","syncPairs","pair","finalObject","DIRTY","OK","isAborted","isDirty","isValid","isAsync","__classPrivateFieldGet","receiver","kind","__classPrivateFieldSet","errorUtil","_ZodEnum_cache","_ZodNativeEnum_cache","ParseInputLazyPath","parent","handleResult","processCreateParams","invalid_type_error","required_error","description","iss","_b","ZodType","input","err","maybeAsyncResult","check","getIssueProperties","setError","refinementData","refinement","ZodEffects","ZodFirstPartyTypeKind","def","ZodOptional","ZodNullable","ZodArray","ZodPromise","option","ZodUnion","incoming","ZodIntersection","transform","defaultValueFunc","ZodDefault","ZodBranded","catchValueFunc","ZodCatch","This","target","ZodPipeline","ZodReadonly","cuidRegex","cuid2Regex","ulidRegex","uuidRegex","nanoidRegex","jwtRegex","durationRegex","emailRegex","_emojiRegex","emojiRegex","ipv4Regex","ipv4CidrRegex","ipv6Regex","ipv6CidrRegex","base64Regex","base64urlRegex","dateRegexSource","dateRegex","timeRegexSource","regex","timeRegex","datetimeRegex","opts","isValidIP","ip","version","isValidJWT","jwt","alg","decoded","isValidCidr","ZodString","tooBig","tooSmall","validation","options","minLength","maxLength","len","ch","min","max","floatSafeRemainder","step","valDecCount","stepDecCount","decCount","valInt","stepInt","ZodNumber","inclusive","ZodBigInt","ZodBoolean","ZodDate","minDate","maxDate","ZodSymbol","ZodUndefined","ZodNull","ZodAny","ZodUnknown","ZodNever","ZodVoid","schema","deepPartialify","ZodObject","newShape","fieldSchema","ZodTuple","shape","shapeKeys","extraKeys","keyValidator","unknownKeys","catchall","_c","_d","defaultError","augmentation","merging","mask","newField","createZodEnum","handleResults","unionErrors","childCtx","dirty","types","getDiscriminator","type","ZodLazy","ZodLiteral","ZodEnum","ZodNativeEnum","ZodDiscriminatedUnion","discriminator","discriminatorValue","optionsMap","discriminatorValues","mergeValues","a","b","aType","bType","bKeys","sharedKeys","newObj","sharedValue","newArray","itemA","itemB","handleParsed","parsedLeft","parsedRight","merged","left","right","itemIndex","rest","schemas","ZodRecord","keyType","valueType","third","ZodMap","finalMap","ZodSet","finalizeSet","elements","parsedSet","element","minSize","maxSize","size","ZodFunction","makeArgsIssue","makeReturnsIssue","returns","fn","me","parsedArgs","parsedReturns","returnType","func","getter","values","expectedValues","enumValues","newDef","opt","nativeEnumValues","promisified","effect","checkCtx","arg","processed","executeRefinement","acc","inner","base","preprocess","newCtx","ZodNaN","BRAND","inResult","freeze","cleanParams","p","custom","_params","fatal","_fatal","late","instanceOfType","cls","stringType","numberType","nanType","bigIntType","booleanType","dateType","symbolType","undefinedType","nullType","anyType","unknownType","neverType","voidType","arrayType","objectType","strictObjectType","unionType","discriminatedUnionType","intersectionType","tupleType","recordType","mapType","setType","functionType","lazyType","literalType","enumType","nativeEnumType","promiseType","effectsType","optionalType","nullableType","preprocessType","pipelineType","z","zFluxText2ImgParams","FluxSchnell","full_output","text","zDeepSeekR1Params","DeepSeekResult","pos_think","end_think","DeepSeekR1","prompt","allowedMediaTypes","zSwapImgToImgParams","zSwapImgToImgFileParams","zSwapParams","zAddFaceParams","zSwapVideoParams","Face2Face","sourceImg","targetImg","sourceMediaFile","targetMediaFile","media","image","faceName","save","imageFile","targetVideo","SocaityAPI","configOptions","model","SocaitySDK","socaity"],"mappings":"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","x_google_ignoreList":[13]}