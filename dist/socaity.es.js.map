{"version":3,"file":"socaity.es.js","sources":["../sdk/core/web/RequestHandler.ts","../sdk/types.ts","../sdk/core/web/ResponseParser.ts","../sdk/core/MediaHandler.ts","../sdk/core/JobManager.ts","../sdk/configuration.ts","../sdk/index.ts"],"sourcesContent":["import { Configuration } from '../../configuration';\r\nimport { ApiResponse, RequestOptions } from '../../types';\r\n\r\n/**\r\n * Handles HTTP requests to the Socaity API\r\n */\r\nexport class RequestHandler {\r\n  private config: Configuration;\r\n  private controller: AbortController;\r\n\r\n  constructor(config: Configuration) {\r\n    this.config = config;\r\n    this.controller = new AbortController();\r\n  }\r\n\r\n  /**\r\n   * Send a request to the API\r\n   * @param endpoint - API endpoint path\r\n   * @param method - HTTP method (GET, POST, etc)\r\n   * @param params - Request parameters\r\n   * @param apiKey - API key to use for this request\r\n   * @param file - Optional file to upload\r\n   * @returns Promise with the API response\r\n   */\r\n  async sendRequest(\r\n    endpoint: string,\r\n    method: 'GET' | 'POST' = 'POST',\r\n    params: Record<string, any> = {},\r\n    apiKey?: string,\r\n    file?: File | Blob | string\r\n  ): Promise<ApiResponse> {\r\n    const url = `${this.config.baseUrl}/${endpoint}`;\r\n    const key = apiKey || this.config.apiKey;\r\n    \r\n    if (!key) {\r\n      throw new Error('API key not provided');\r\n    }\r\n\r\n    const options: RequestOptions = {\r\n      method,\r\n      headers: {\r\n        'Authorization': `Bearer ${key}`,\r\n      },\r\n      signal: this.controller.signal\r\n    };\r\n\r\n    // Handle file uploads\r\n    if (file) {\r\n      const formData = new FormData();\r\n      \r\n      // Add parameters to form data\r\n      Object.entries(params).forEach(([key, value]: [string, unknown]) => {\r\n        if (typeof value === 'object') {\r\n          formData.append(key, JSON.stringify(value));\r\n        } else {\r\n          formData.append(key, String(value));\r\n        }\r\n      });\r\n      \r\n      // Add file to form data\r\n      if (typeof file === 'string') {\r\n        // Handle URL or base64 string\r\n        formData.append('file', file);\r\n      } else {\r\n        // Browser File or Blob object\r\n        formData.append('file', file);\r\n      }\r\n      \r\n      options.body = formData;\r\n    } else if (Object.keys(params).length > 0) {\r\n      if (method === 'GET') {\r\n        // Convert params to query string for GET requests\r\n        const queryParams = new URLSearchParams();\r\n        \r\n        Object.entries(params).forEach(([key, value]: [string, unknown]) => {\r\n          if (typeof value === 'object') {\r\n            queryParams.append(key, JSON.stringify(value));\r\n          } else {\r\n            queryParams.append(key, String(value));\r\n          }\r\n        });\r\n        \r\n        const queryString = queryParams.toString();\r\n        if (queryString) {\r\n          endpoint = `${endpoint}?${queryString}`;\r\n        }\r\n      } else {\r\n        // JSON body for non-file POST requests\r\n        options.headers['Content-Type'] = 'application/json';\r\n        options.body = JSON.stringify(params);\r\n      }\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(url, options);\r\n      \r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        throw new Error(`API error (${response.status}): ${errorText}`);\r\n      }\r\n      \r\n      return await response.json();\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        throw error;\r\n      }\r\n      throw new Error(`Network error: ${String(error)}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send a GET request\r\n   */\r\n  async get(endpoint: string, params: Record<string, any> = {}, apiKey?: string): Promise<ApiResponse> {\r\n    return this.sendRequest(endpoint, 'GET', params, apiKey);\r\n  }\r\n\r\n  /**\r\n   * Send a POST request\r\n   */\r\n  async post(endpoint: string, params: Record<string, any> = {}, apiKey?: string, file?: File | Blob | string): Promise<ApiResponse> {\r\n    return this.sendRequest(endpoint, 'POST', params, apiKey, file);\r\n  }\r\n  \r\n  /**\r\n   * Abort any ongoing requests\r\n   */\r\n  abort(): void {\r\n    this.controller.abort();\r\n    this.controller = new AbortController();\r\n  }\r\n}","/**\r\n * Represents the status of a job\r\n */\r\nexport enum JobStatus {\r\n    CREATED = 'CREATED',\r\n    QUEUED = 'QUEUED',\r\n    PROCESSING = 'PROCESSING',\r\n    COMPLETED = 'COMPLETED',\r\n    FAILED = 'FAILED'\r\n  }\r\n  \r\n  /**\r\n   * Represents a job in the Socaity system\r\n   */\r\n  export interface SocaityJob {\r\n    id: string;\r\n    status: JobStatus;\r\n    progress: number;\r\n    message?: string;\r\n    result?: any;\r\n    error?: string | null;\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n  }\r\n  \r\n  /**\r\n   * Generic API response type\r\n   */\r\n  export interface ApiResponse {\r\n    id?: string;\r\n    status?: string;\r\n    jobId?: string;\r\n    progress?: number;\r\n    message?: string;\r\n    result?: any;\r\n    error?: string;\r\n    [key: string]: any;\r\n  }\r\n  \r\n  /**\r\n   * Configuration options for the SDK\r\n   */\r\n  export interface SocaityConfig {\r\n    apiKey?: string;\r\n    baseUrl: string;\r\n    pollInterval: number;\r\n    maxRetries: number;\r\n  }\r\n  \r\n  /**\r\n   * HTTP request options\r\n   */\r\n  export interface RequestOptions extends RequestInit {\r\n    headers: Record<string, string>;\r\n    body?: FormData | string;\r\n  }\r\n\r\n  /**\r\n   * Text to image options\r\n   */\r\n  export interface Text2ImgOptions {\r\n    apiKey?: string;\r\n    width?: number;\r\n    height?: number;\r\n    steps?: number;\r\n    seed?: number;\r\n  }","import { ApiResponse, JobStatus, SocaityJob } from '../../types';\r\n\r\n/**\r\n * Parses API responses into standardized formats\r\n */\r\nexport class ResponseParser {\r\n  /**\r\n   * Check if the response can be parsed by this parser\r\n   */\r\n  canParse(response: any): boolean {\r\n    if (!response) return false;\r\n    \r\n    // Check for standard Socaity API response format\r\n    if (response.id || response.jobId) {\r\n      return true;\r\n    }\r\n    \r\n    // Check for Runpod API response format\r\n    if (response.id && (response.status || response.state)) {\r\n      return true;\r\n    }\r\n    \r\n    // Check for Replicate API response format\r\n    if (response.id && response.status && response.urls) {\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n  \r\n  /**\r\n   * Parse response into standardized job format\r\n   */\r\n  parse(response: ApiResponse): SocaityJob {\r\n    const job: SocaityJob = {\r\n      id: response.id || response.jobId || '',\r\n      status: this.parseStatus(response),\r\n      progress: this.parseProgress(response),\r\n      result: response.result || response.output || null,\r\n      error: response.error || null,\r\n      message: response.message || '',\r\n      createdAt: new Date(),\r\n      updatedAt: new Date()\r\n    };\r\n    \r\n    return job;\r\n  }\r\n  \r\n  /**\r\n   * Parse status from different API formats\r\n   */\r\n  private parseStatus(response: ApiResponse): JobStatus {\r\n    // Handle standard format\r\n    const status = (response.status || '').toUpperCase();\r\n    \r\n    if (status === 'COMPLETED' || status === 'SUCCEEDED') {\r\n      return JobStatus.COMPLETED;\r\n    } else if (status === 'FAILED' || status === 'ERROR') {\r\n      return JobStatus.FAILED;\r\n    } else if (status === 'IN_PROGRESS' || status === 'PROCESSING' || status === 'RUNNING') {\r\n      return JobStatus.PROCESSING;\r\n    } else if (status === 'QUEUED' || status === 'PENDING') {\r\n      return JobStatus.QUEUED;\r\n    }\r\n    \r\n    // Handle Runpod format\r\n    if (response.state) {\r\n      const state = response.state.toUpperCase();\r\n      if (state === 'COMPLETED') return JobStatus.COMPLETED;\r\n      if (state === 'FAILED') return JobStatus.FAILED;\r\n      if (state === 'IN_PROGRESS') return JobStatus.PROCESSING;\r\n      if (state === 'QUEUED') return JobStatus.QUEUED;\r\n    }\r\n    \r\n    return JobStatus.CREATED;\r\n  }\r\n  \r\n  /**\r\n   * Parse progress from different API formats\r\n   */\r\n  private parseProgress(response: ApiResponse): number {\r\n    if (typeof response.progress === 'number') {\r\n      return response.progress;\r\n    }\r\n    \r\n    if (response.status === 'COMPLETED' || response.status === 'SUCCEEDED') {\r\n      return 1.0;\r\n    }\r\n    \r\n    return 0.0;\r\n  }\r\n}","// src/media-handler.ts\r\n/**\r\n * Handles processing of media responses\r\n */\r\nexport class MediaHandler {\r\n    /**\r\n     * Process a response that might contain media data\r\n     */\r\n    processResponse(response: any): any {\r\n      if (!response) return null;\r\n      \r\n      // Handle base64 image data\r\n      if (typeof response === 'string' && response.startsWith('data:image')) {\r\n        return this.processImage(response);\r\n      }\r\n      \r\n      // Handle binary data\r\n      if (response instanceof ArrayBuffer || response instanceof Blob) {\r\n        return this.processBinaryData(response);\r\n      }\r\n      \r\n      // Handle response objects with media content\r\n      if (typeof response === 'object' && response !== null) {\r\n        if (response.image_base64 || response.imageBase64) {\r\n          return this.processImage(response.image_base64 || response.imageBase64);\r\n        }\r\n        \r\n        if (response.image_url || response.imageUrl) {\r\n          return {\r\n            url: response.image_url || response.imageUrl,\r\n            ...response\r\n          };\r\n        }\r\n      }\r\n      \r\n      // Return unmodified response if no media processing is needed\r\n      return response;\r\n    }\r\n    \r\n    /**\r\n     * Process image data from the API\r\n     */\r\n    private processImage(imageData: string): any {\r\n      // For browser environments, we can create an image object\r\n      if (typeof document !== 'undefined') {\r\n        const img = new Image();\r\n        img.src = imageData;\r\n        return {\r\n          data: imageData,\r\n          element: img,\r\n          appendTo: (element: HTMLElement) => {\r\n            element.appendChild(img);\r\n            return img;\r\n          }\r\n        };\r\n      }\r\n      \r\n      // For Node.js environments, just return the data\r\n      return { data: imageData };\r\n    }\r\n    \r\n    /**\r\n     * Process binary data from the API\r\n     */\r\n    private processBinaryData(data: ArrayBuffer | Blob): any {\r\n      if (typeof Blob !== 'undefined' && data instanceof Blob) {\r\n        return {\r\n          data,\r\n          toURL: () => URL.createObjectURL(data),\r\n          toBase64: async () => {\r\n            return new Promise((resolve) => {\r\n              const reader = new FileReader();\r\n              reader.onloadend = () => resolve(reader.result);\r\n              reader.readAsDataURL(data);\r\n            });\r\n          }\r\n        };\r\n      }\r\n      \r\n      return { data };\r\n    }\r\n  }","// src/job-manager.ts\r\nimport { RequestHandler } from './web/RequestHandler';\r\nimport { Configuration } from '../configuration';\r\nimport { SocaityJob, JobStatus, ApiResponse } from '../types';\r\nimport { ResponseParser } from './web/ResponseParser';\r\nimport { MediaHandler } from './MediaHandler';\r\n\r\n/**\r\n * Manages asynchronous jobs for the Socaity API\r\n */\r\nexport class JobManager {\r\n  private requestHandler: RequestHandler;\r\n  private config: Configuration;\r\n  private jobs: Map<string, SocaityJob>;\r\n  private responseParser: ResponseParser;\r\n  private mediaHandler: MediaHandler;\r\n\r\n  constructor(requestHandler: RequestHandler, config: Configuration) {\r\n    this.requestHandler = requestHandler;\r\n    this.config = config;\r\n    this.jobs = new Map();\r\n    this.responseParser = new ResponseParser();\r\n    this.mediaHandler = new MediaHandler();\r\n  }\r\n\r\n  /**\r\n   * Submit a new job to the API\r\n   * @param endpoint - API endpoint to call\r\n   * @param params - Parameters for the job\r\n   * @param apiKey - Optional API key to use for this request\r\n   * @param file - Optional file to include\r\n   * @returns Promise resolving to the created job\r\n   */\r\n  async submitJob(\r\n    endpoint: string, \r\n    params: Record<string, any>, \r\n    apiKey?: string,\r\n    file?: File | string | any  // using any instead of Buffer which is only node.js compatible.\r\n  ): Promise<SocaityJob> {\r\n    try {\r\n      const response = await this.requestHandler.post(endpoint, params, apiKey, file);\r\n      \r\n      // Parse initial response to get job information\r\n      if (!this.responseParser.canParse(response)) {\r\n        throw new Error('Unexpected response format from API');\r\n      }\r\n      \r\n      const job = this.responseParser.parse(response);\r\n      \r\n      // Store the job\r\n      this.jobs.set(job.id, job);\r\n      \r\n      return job;\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        throw error;\r\n      }\r\n      throw new Error(`Failed to submit job: ${String(error)}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all tracked jobs\r\n   */\r\n  getAllJobs(): SocaityJob[] {\r\n    return Array.from(this.jobs.values());\r\n  }\r\n\r\n  /**\r\n   * Get a specific job by ID\r\n   * @param jobId - ID of the job to retrieve\r\n   */\r\n  getJob(jobId: string): SocaityJob | undefined {\r\n    return this.jobs.get(jobId);\r\n  }\r\n\r\n  /**\r\n   * Track a job until it completes\r\n   * @param job - The job to track\r\n   * @returns Promise resolving to the final result of the job\r\n   */\r\n  async trackJobToCompletion(job: SocaityJob): Promise<any> {\r\n    while (true) {\r\n      await new Promise(resolve => setTimeout(resolve, this.config.pollInterval));\r\n      \r\n      const updatedJob = await this.requestHandler.get(`status/${job.id}`);\r\n      \r\n      if (updatedJob.status === JobStatus.COMPLETED) {\r\n        return this.mediaHandler.processResponse(updatedJob.result);\r\n      }\r\n      \r\n      if (updatedJob.status === JobStatus.FAILED) {\r\n        throw new Error(`Job failed: ${updatedJob.error}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancel a running job\r\n   * @param jobId - ID of the job to cancel\r\n   * @returns Promise resolving to true if the job was cancelled\r\n   */\r\n  async cancelJob(jobId: string): Promise<boolean> {\r\n    try {\r\n      await this.requestHandler.post(`cancel/${jobId}`, {});\r\n      this.jobs.delete(jobId);\r\n      return true;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear completed or failed jobs from tracking\r\n   */\r\n  clearCompletedJobs(): void {\r\n    for (const [jobId, job] of this.jobs.entries()) {\r\n      if (job.status === JobStatus.COMPLETED || job.status === JobStatus.FAILED) {\r\n        this.jobs.delete(jobId);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { SocaityConfig } from './types';\r\n\r\n/**\r\n * Manages configuration settings for the SDK\r\n */\r\nexport class Configuration implements SocaityConfig {\r\n  apiKey?: string;\r\n  baseUrl: string;\r\n  pollInterval: number;\r\n  maxRetries: number;\r\n\r\n  constructor(config: Partial<SocaityConfig> = {}) {\r\n    this.apiKey = config.apiKey;\r\n    this.baseUrl = config.baseUrl || 'https://api.socaity.ai/v1';\r\n    this.pollInterval = config.pollInterval || 1000;\r\n    this.maxRetries = config.maxRetries || 3;\r\n  }\r\n\r\n  /**\r\n   * Updates configuration with new values\r\n   */\r\n  update(config: Partial<SocaityConfig>): void {\r\n    if (config.apiKey !== undefined) this.apiKey = config.apiKey;\r\n    if (config.baseUrl !== undefined) this.baseUrl = config.baseUrl;\r\n    if (config.pollInterval !== undefined) this.pollInterval = config.pollInterval;\r\n    if (config.maxRetries !== undefined) this.maxRetries = config.maxRetries;\r\n  }\r\n\r\n  /**\r\n   * Creates a copy of this configuration\r\n   */\r\n  clone(): Configuration {\r\n    return new Configuration({\r\n      apiKey: this.apiKey,\r\n      baseUrl: this.baseUrl,\r\n      pollInterval: this.pollInterval,\r\n      maxRetries: this.maxRetries\r\n    });\r\n  }\r\n}","// src/index.ts\r\nimport { RequestHandler } from './core/web/RequestHandler';\r\nimport { JobManager } from './core/JobManager';\r\nimport { SocaityJob } from './types';\r\nimport { Configuration } from './configuration';\r\nimport { ResponseParser } from './core/web/ResponseParser';\r\nimport { MediaHandler } from './core/MediaHandler';\r\n\r\n/**\r\n * Main Socaity SDK class\r\n * Provides methods to interact with Socaity API services\r\n */\r\nclass SocaitySDK {\r\n  private requestHandler: RequestHandler;\r\n  private jobManager: JobManager;\r\n  private config: Configuration;\r\n\r\n  constructor() {\r\n    this.config = new Configuration();\r\n    this.requestHandler = new RequestHandler(this.config);\r\n    this.jobManager = new JobManager(this.requestHandler, this.config);\r\n  }\r\n\r\n  /**\r\n   * Set the API key for all future requests\r\n   * @param apiKey - Your Socaity API key\r\n   */\r\n  setApiKey(apiKey: string): void {\r\n    this.config.apiKey = apiKey;\r\n  }\r\n\r\n  /**\r\n   * Set the base URL for the API\r\n   * @param url - Base URL for the Socaity API\r\n   */\r\n  setBaseUrl(url: string): void {\r\n    this.config.baseUrl = url;\r\n  }\r\n\r\n  /**\r\n   * Generate an image from text prompt\r\n   * @param prompt - Text description of the image to generate\r\n   * @param options - Additional options for the request\r\n   * @returns Promise resolving to the generated image\r\n   */\r\n  async text2img(prompt: string, options: { apiKey?: string } = {}): Promise<any> {    \r\n    const endpoint = 'text2img';\r\n    const params = { prompt };\r\n    return this.executeRequest(endpoint, params, options);\r\n  }\r\n\r\n  /**\r\n   * Chat with an AI model\r\n   * @param messages - Array of message objects with roles and content\r\n   * @param options - Additional options for the request\r\n   * @returns Promise resolving to the chat response\r\n   */\r\n  async chat(messages: Array<{role: string, content: string}>, options: { \r\n    apiKey?: string,\r\n    model?: string,\r\n    temperature?: number\r\n  } = {}): Promise<any> {    \r\n    const endpoint = 'chat';\r\n    const params = { \r\n      messages,\r\n      model: options.model || 'default',\r\n      temperature: options.temperature || 0.7\r\n    };\r\n    \r\n    return this.executeRequest(endpoint, params, options);\r\n  }\r\n\r\n  /**\r\n   * Upload a file to be processed by Socaity services\r\n   * @param file - File to upload (File object, Buffer, or file path)\r\n   * @param options - Additional options for the request\r\n   * @returns Promise resolving to the uploaded file information\r\n   */\r\n  async uploadFile(file: File | string | any, options: { apiKey?: string } = {}): Promise<any> {\r\n    this.validateApiKey(options.apiKey);\r\n    \r\n    const endpoint = 'upload';\r\n    return this.executeRequest(endpoint, {}, options, file);\r\n  }\r\n\r\n  /**\r\n   * Get a list of all active jobs\r\n   * @returns Array of all tracked jobs\r\n   */\r\n  getJobs(): SocaityJob[] {\r\n    return this.jobManager.getAllJobs();\r\n  }\r\n\r\n  /**\r\n   * Get a specific job by ID\r\n   * @param jobId - ID of the job to retrieve\r\n   * @returns The job if found, undefined otherwise\r\n   */\r\n  getJob(jobId: string): SocaityJob | undefined {\r\n    return this.jobManager.getJob(jobId);\r\n  }\r\n\r\n  /**\r\n   * Cancel a running job\r\n   * @param jobId - ID of the job to cancel\r\n   * @returns Promise resolving to true if successful\r\n   */\r\n  async cancelJob(jobId: string): Promise<boolean> {\r\n    return this.jobManager.cancelJob(jobId);\r\n  }\r\n\r\n  /**\r\n   * Execute a request to the Socaity API\r\n   * @private\r\n   */\r\n  private async executeRequest(\r\n    endpoint: string, \r\n    params: Record<string, any>, \r\n    options: { apiKey?: string } = {},\r\n    file?: File | string | any\r\n  ): Promise<any> {\r\n    const apiKey = options.apiKey || this.config.apiKey;\r\n    this.validateApiKey(apiKey);\r\n    // Submit the job\r\n    const job = await this.jobManager.submitJob(endpoint, params, apiKey, file);\r\n    \r\n    // Start tracking the job\r\n    return this.jobManager.trackJobToCompletion(job);\r\n  }\r\n\r\n  /**\r\n   * Validates that an API key is available\r\n   * @private\r\n   */\r\n  private validateApiKey(providedApiKey?: string): void {\r\n    if (!providedApiKey && !this.config.apiKey) {\r\n      throw new Error('API key not set. Use setApiKey() method or provide an apiKey in the options.');\r\n    }\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst socaity = new SocaitySDK();\r\n\r\n// Export both the instance and the class\r\nexport { socaity, SocaitySDK };\r\n\r\n// Browser global (if running in a browser)\r\nif (typeof window !== \"undefined\") {\r\n  (window as any).socaity = socaity;\r\n}"],"names":["RequestHandler","config","__publicField","endpoint","method","params","apiKey","file","url","key","options","formData","value","queryParams","queryString","response","errorText","error","JobStatus","ResponseParser","status","state","MediaHandler","imageData","img","element","data","resolve","reader","JobManager","requestHandler","job","jobId","updatedJob","Configuration","SocaitySDK","prompt","messages","providedApiKey","socaity"],"mappings":"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"}